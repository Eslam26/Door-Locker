/******************************************************************************************************
 *  [FILE NAME]   :      <uart.c>                                                                    *
 *  [AUTHOR]      :      <Eslam EL-Naggar>                                                             *
 *  [DATE CREATED]:      <Oct 4, 2019>                                                                 *
 *  [Description} :      <This file contains the definitions of the functions that using for keypad>   *
 ******************************************************************************************************/

/*------------------------------------------INCLUDES--------------------------------------------------*/

#include "uart.h"
/*------------------------------------STATIC FUNCTIONS DECLARATIONS-----------------------------------*/

static uint16 getUBRRvalue(const Uart_configType * configType_Ptr);
/*------------------------------------FUNCTIONS DEFINITIONS-------------------------------------------*/

/*----------------------------------------------------------------------------------------------------
 [Function Name]:  UART_init
 [Description]  :  This function is responsible for initializing UART
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/

void UART_init(const Uart_configType * configType_Ptr)
{
	uint16 baudPrescale;
	UCSRA = (UCSRA & 0b11111101) | ((!(configType_Ptr->mode) & 0b00000001)<<U2X);
	UCSRA = (UCSRA & 0b11111110) | ((configType_Ptr->multiMode & 0b00000001)<<MPCM);

	UCSRB = (UCSRB & 0b00011111) | ((configType_Ptr->interrupt & 0b00000001)<<UDRIE);
	UCSRB = (1<<RXEN) | (1<<TXEN);
	UCSRB = (UCSRB & 0b11111011) | (((configType_Ptr->size   & 0b00000100)>>2)<<UCSZ2);


	UCSRC = (1<<URSEL) ;
	UCSRC = (UCSRC & 0b10111111) | ((configType_Ptr->mode   & 0b00000001)<<UMSEL);
	UCSRC = (UCSRC & 0b11001111) | ((configType_Ptr->parity & 0b00000011)<<UPM0);
    UCSRC = (UCSRC & 0b11110111) | ((configType_Ptr->stop   & 0b00000001)<<USBS);
    UCSRC = (UCSRC & 0b11111001) | ((configType_Ptr->size   & 0b00000011)<<UCSZ0);
    UCSRC = (UCSRC & 0b11111110) | ((configType_Ptr->clock  & 0b00000001)<<UCPOL);

    baudPrescale = getUBRRvalue(configType_Ptr);
    UBRRH = baudPrescale>>8;
    UBRRL = baudPrescale;

}

/*----------------------------------------------------------------------------------------------------
 [Function Name]:  UART_sendByte
 [Description]  :  This function is responsible for initializing UART
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void UART_sendByte(const uint8 a_data)
{
	UDR = a_data;
    while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
    SET_BIT(UCSRA,TXC); // Clear the TXC flag
}

/*----------------------------------------------------------------------------------------------------
 [Function Name]:  UART_recieveByte
 [Description]  :  This function is responsible for initializing UART
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
uint8 UART_recieveByte(void)
{
	/* RXC flag is set when the UART receive data so wait until this
		 * flag is set to one */
		while(BIT_IS_CLEAR(UCSRA,RXC)){}
		/* Read the received data from the Rx buffer (UDR) and the RXC flag
		   will be cleared after read this data */
	    return UDR;
}

/*----------------------------------------------------------------------------------------------------
 [Function Name]:  UART_sendString
 [Description]  :  This function is responsible for initializing UART
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/

void UART_sendString(const uint8 * a_string )
{
	while(*a_string != '\0')
		{
			UART_sendByte(*a_string);
			a_string++;
		}
}

/*----------------------------------------------------------------------------------------------------
 [Function Name]:  UART_recieveString
 [Description]  :  This function is responsible for initializing UART
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void UART_recieveString(uint8 * a_string)
{
	    uint8 i = 0;
		a_string[i] = UART_recieveByte();
		while(a_string[i] != '$')
		{
			i++;
			a_string[i] = UART_recieveByte();
		}
		a_string[i] = '\0';
}

/*----------------------------------------------------------------------------------------------------
 [Function Name]:  UART_recieveString
 [Description]  :  This function is responsible for initializing UART
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
static uint16 getUBRRvalue(const Uart_configType * configType_Ptr)
{
	if(!(configType_Ptr->mode))
	{
		if(BIT_IS_SET(UCSRA, U2X))
			{
				return (((F_CPU / ((configType_Ptr->userBaudRate) * 8UL))) - 1);
			}
		else
		{
				return (((F_CPU / ((configType_Ptr->userBaudRate) * 16UL))) - 1);
		}

	}
	else
	{
		return (((F_CPU / ((configType_Ptr->userBaudRate) * 2UL))) - 1);
	}

}
