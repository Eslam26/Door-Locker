/*
 * main.c
 *
 *  Created on: Oct 4, 2019
 *      Author: eslamelnaggar
 */

/*------------------------------------------------------INCLUDES-------------------------------------------------------------------------*/
#include "micro_config.h"
#include "uart.h"
#include "timer1.h"
#include "external_eeprom.h"

/*---------------------------------------------------DEFINITIONS--------------------------------------------------------------------------*/
#define CONTROL_ECU_READY 0x11
#define PASSWORD_COMMAND  0x01
#define PASSWORD_CONFIRMATION_COMMAND 0x02
#define PASSWORD_MATCH_CONFIRMATION_COMMAND 0x03
#define PASSWORD_MATCH_NOT_CONFIRMATION_COMMAND 0x04
#define PASSWORD_SCREEN_COMMAND 0x05
#define REQUEST_SCREEN_COMMAND 0x06
#define OPEN_DOOR_COMMAND 0x07
#define DOOR_IS_OPENNING_COMMAND 0x08
#define DOOR_IS_LOCKING_COMMAND 0x09
#define COMPLETE_TASK_COMMAND 0x0A
#define ALARM_COMMAND 0x0B
#define GET_PASSWORD_DONE 0x0C
#define BASE_ADDRESS_LOCATION 0x0002

#define BUZZER_PORT_DIRECTION DDRD
#define BUZZER_PORT PORTD
#define BUZZER_PIN PD2
#define MOTOR_PORT_DIRECTION DDRC
#define MOTOR_PORT PORTC
#define MOTOR_IN1 4
#define MOTOR_IN2 5
#define MOTOR_EN 3
#define NULL_Ptr ((void*)0)
#define ZERO 0

/*------------------------------------------------FUNCTIONS DECLARATIONS------------------------------------------------------------------*/

uint8 recieveData(void);
void passwordCreation(void);
void passwordConfirmation(void);
void savePassword (uint8 * a_pass);
void comparingWithSavedPassword (void);
void openCloseDoor(void);
void buzzer(void);
void calledBackFunction (void);
void sendData(uint8 data);

/*-------------------------------------------------GLOBAL VARIABLES-----------------------------------------------------------------------*/
uint8 g_stepSelector = 0;
uint8 g_password[6] = { 0 };
uint8 g_data;
uint8 g_counter = 0;
uint8 g_errorCounter;
Timer1_configType * Timer1_configType_Ptr = NULL_Ptr;
Timer1_compare_1A * Timer1_compare_1A_configType_Ptr = NULL_Ptr;
Timer1_configType TIMER1_configType = {CTC_OCR1A, F_CPU_64, 0};
Timer1_compare_1A Timer1_compare_1A_configType = {0, compareMode_1A, 15625};

/*--------------------------------------------------STRUCTURES----------------------------------------------------------------------------*/

int main() {


	SET_BIT(MOTOR_PORT_DIRECTION,MOTOR_IN1);
	SET_BIT(MOTOR_PORT_DIRECTION,MOTOR_IN2);
	SET_BIT(MOTOR_PORT_DIRECTION,MOTOR_EN);
	SET_BIT(BUZZER_PORT_DIRECTION,BUZZER_PIN);
	Uart_configType UART_config = { Asynchronus, Disabled, _2bit, _8bit,
				Rising_Transmitted_Falling_Recieved, 0, multi_OFF, 9600 };

	Timer1_configType_Ptr = &TIMER1_configType;
	Timer1_compare_1A_configType_Ptr = &Timer1_compare_1A_configType;

	Timer1_init(&TIMER1_configType);
	Timer1_setCallBack(calledBackFunction);
	UART_init(&UART_config);
	EEPROM_init();
	while (UART_recieveByte() != CONTROL_ECU_READY);
	UART_sendByte(CONTROL_ECU_READY);
	while (UART_recieveByte() != CONTROL_ECU_READY);
	while (1) {
		g_data = recieveData();
		switch (g_data) {
		case PASSWORD_COMMAND:
			passwordCreation();
			break;
		case PASSWORD_CONFIRMATION_COMMAND:
			passwordConfirmation();
			break;
		case PASSWORD_SCREEN_COMMAND:
			comparingWithSavedPassword();
			break;
		case OPEN_DOOR_COMMAND:
			openCloseDoor();
			break;
		default:
			break;

		}

	}

}

void passwordCreation(void) {
	uint8 i = 0;
	while (UART_recieveByte() != COMPLETE_TASK_COMMAND) {
		g_password[i] = UART_recieveByte();
		i++;
	}
}

void passwordConfirmation(void) {

	uint8 i = 0;
	uint8 flag = 0;
	while (UART_recieveByte() != COMPLETE_TASK_COMMAND) {
		if (g_password[i] == UART_recieveByte()) {

		} else {
			flag = 1;
		}
		i++;
	}
	if(flag)
	{
		UART_sendByte(PASSWORD_MATCH_NOT_CONFIRMATION_COMMAND);
	}
	else
	{

		savePassword(g_password);
		UART_sendByte(PASSWORD_MATCH_CONFIRMATION_COMMAND);
	}
}

void savePassword (uint8 * a_pass)
{
	uint8 i = 0;
	while(i!=5)
	{
		EEPROM_writeByte(BASE_ADDRESS_LOCATION+i,a_pass[i]);
		i++;
	}
}

void comparingWithSavedPassword (void)
{
	uint8 i = 0;
	uint8 * g_password_Ptr = g_password;
	while(i!=5)
		{
			EEPROM_readByte(BASE_ADDRESS_LOCATION+i,g_password_Ptr+i);
			i++;
		}
	UART_sendByte(GET_PASSWORD_DONE);
	while(UART_recieveByte() != CONTROL_ECU_READY);
	i = 0;
		uint8 flag = 0;
		while (UART_recieveByte() != COMPLETE_TASK_COMMAND) {
			if (g_password[i] == UART_recieveByte()) {

			} else {
				flag = 1;
			}
			i++;
		}
		if(flag)
		{
			g_errorCounter++;
			if(g_errorCounter == 3)
			{
				UART_sendByte(ALARM_COMMAND);
				buzzer();
				g_errorCounter=0;
			}
			else{
			UART_sendByte(PASSWORD_MATCH_NOT_CONFIRMATION_COMMAND);
			}
		}
		else
		{
			UART_sendByte(PASSWORD_MATCH_CONFIRMATION_COMMAND);
			savePassword(g_password);
		}

}

void openCloseDoor(void){
	Timer1_compareMode_OCR1A(&Timer1_compare_1A_configType);
	UART_sendByte(DOOR_IS_OPENNING_COMMAND);
	SET_BIT(MOTOR_PORT,MOTOR_EN);
	SET_BIT(MOTOR_PORT,MOTOR_IN1);
	CLEAR_BIT(MOTOR_PORT,MOTOR_IN2);
	g_counter = 0;
	while(g_counter != 15);
	g_counter = 0;
    SET_BIT(MOTOR_PORT,MOTOR_IN2);
	CLEAR_BIT(MOTOR_PORT,MOTOR_IN1);
	UART_sendByte(DOOR_IS_LOCKING_COMMAND);
	while(g_counter != 15);
	CLEAR_BIT(MOTOR_PORT,MOTOR_EN);
	CLEAR_BIT(MOTOR_PORT,MOTOR_IN1);
	CLEAR_BIT(MOTOR_PORT,MOTOR_IN2);
	UART_sendByte(COMPLETE_TASK_COMMAND);

}

void buzzer(void){
	Timer1_compareMode_OCR1A(&Timer1_compare_1A_configType);
	g_counter = 0;
	SET_BIT(BUZZER_PORT,BUZZER_PIN);
	while(g_counter != 60);
    CLEAR_BIT(BUZZER_PORT,BUZZER_PIN);
	UART_sendByte(COMPLETE_TASK_COMMAND);
}

uint8 recieveData(void) {
	while (UART_recieveByte() != CONTROL_ECU_READY)
		;
	UART_sendByte(CONTROL_ECU_READY);
	g_data = UART_recieveByte();
	UART_sendByte(CONTROL_ECU_READY);
	return g_data;
}

void sendData(uint8 data) {
	UART_sendByte(CONTROL_ECU_READY);
	while (UART_recieveByte() != CONTROL_ECU_READY)
		;
	UART_sendByte(data);
	while (UART_recieveByte() != CONTROL_ECU_READY)
		;
}

void calledBackFunction (void){
	g_counter++;
}
