
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000011f6  0000128a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800084  00800084  000012ae  2**0
                  ALLOC
  3 .stab         000022b0  00000000  00000000  000012b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c30  00000000  00000000  00003560  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 b1 03 	jmp	0x762	; 0x762 <__vector_11>
      30:	0c 94 17 04 	jmp	0x82e	; 0x82e <__vector_12>
      34:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ef       	ldi	r30, 0xF6	; 246
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3a       	cpi	r26, 0xA1	; 161
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d0 06 	call	0xda0	; 0xda0 <main>
      8a:	0c 94 f9 08 	jmp	0x11f2	; 0x11f2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_19>:
      92:	1f 92       	push	r1
      94:	0f 92       	push	r0
      96:	0f b6       	in	r0, 0x3f	; 63
      98:	0f 92       	push	r0
      9a:	11 24       	eor	r1, r1
      9c:	2f 93       	push	r18
      9e:	3f 93       	push	r19
      a0:	4f 93       	push	r20
      a2:	5f 93       	push	r21
      a4:	6f 93       	push	r22
      a6:	7f 93       	push	r23
      a8:	8f 93       	push	r24
      aa:	9f 93       	push	r25
      ac:	af 93       	push	r26
      ae:	bf 93       	push	r27
      b0:	ef 93       	push	r30
      b2:	ff 93       	push	r31
      b4:	df 93       	push	r29
      b6:	cf 93       	push	r28
      b8:	cd b7       	in	r28, 0x3d	; 61
      ba:	de b7       	in	r29, 0x3e	; 62
      bc:	80 91 84 00 	lds	r24, 0x0084
      c0:	90 91 85 00 	lds	r25, 0x0085
      c4:	00 97       	sbiw	r24, 0x00	; 0
      c6:	61 f0       	breq	.+24     	; 0xe0 <__vector_19+0x4e>
      c8:	e0 91 84 00 	lds	r30, 0x0084
      cc:	f0 91 85 00 	lds	r31, 0x0085
      d0:	09 95       	icall
      d2:	80 91 60 00 	lds	r24, 0x0060
      d6:	81 30       	cpi	r24, 0x01	; 1
      d8:	19 f4       	brne	.+6      	; 0xe0 <__vector_19+0x4e>
      da:	80 e0       	ldi	r24, 0x00	; 0
      dc:	0e 94 3b 02 	call	0x476	; 0x476 <GPT_disable>
      e0:	cf 91       	pop	r28
      e2:	df 91       	pop	r29
      e4:	ff 91       	pop	r31
      e6:	ef 91       	pop	r30
      e8:	bf 91       	pop	r27
      ea:	af 91       	pop	r26
      ec:	9f 91       	pop	r25
      ee:	8f 91       	pop	r24
      f0:	7f 91       	pop	r23
      f2:	6f 91       	pop	r22
      f4:	5f 91       	pop	r21
      f6:	4f 91       	pop	r20
      f8:	3f 91       	pop	r19
      fa:	2f 91       	pop	r18
      fc:	0f 90       	pop	r0
      fe:	0f be       	out	0x3f, r0	; 63
     100:	0f 90       	pop	r0
     102:	1f 90       	pop	r1
     104:	18 95       	reti

00000106 <__vector_6>:
		}

	}
}

ISR(TIMER1_COMPA_vect) {
     106:	1f 92       	push	r1
     108:	0f 92       	push	r0
     10a:	0f b6       	in	r0, 0x3f	; 63
     10c:	0f 92       	push	r0
     10e:	11 24       	eor	r1, r1
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	4f 93       	push	r20
     116:	5f 93       	push	r21
     118:	6f 93       	push	r22
     11a:	7f 93       	push	r23
     11c:	8f 93       	push	r24
     11e:	9f 93       	push	r25
     120:	af 93       	push	r26
     122:	bf 93       	push	r27
     124:	ef 93       	push	r30
     126:	ff 93       	push	r31
     128:	df 93       	push	r29
     12a:	cf 93       	push	r28
     12c:	cd b7       	in	r28, 0x3d	; 61
     12e:	de b7       	in	r29, 0x3e	; 62
	if (g_GPT_1_callBackPtr != NULL_PTR) {
     130:	80 91 86 00 	lds	r24, 0x0086
     134:	90 91 87 00 	lds	r25, 0x0087
     138:	00 97       	sbiw	r24, 0x00	; 0
     13a:	61 f0       	breq	.+24     	; 0x154 <__vector_6+0x4e>
		(*g_GPT_1_callBackPtr)();
     13c:	e0 91 86 00 	lds	r30, 0x0086
     140:	f0 91 87 00 	lds	r31, 0x0087
     144:	09 95       	icall
		/* if running mode is one shot mode -> disable the timer */
		if (GPT_1_runningMode == GPT_CH_MODE_ONESHOT) {
     146:	80 91 61 00 	lds	r24, 0x0061
     14a:	81 30       	cpi	r24, 0x01	; 1
     14c:	19 f4       	brne	.+6      	; 0x154 <__vector_6+0x4e>
			GPT_disable(CHANNEL_ID_1);
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	0e 94 3b 02 	call	0x476	; 0x476 <GPT_disable>
		}
	}

}
     154:	cf 91       	pop	r28
     156:	df 91       	pop	r29
     158:	ff 91       	pop	r31
     15a:	ef 91       	pop	r30
     15c:	bf 91       	pop	r27
     15e:	af 91       	pop	r26
     160:	9f 91       	pop	r25
     162:	8f 91       	pop	r24
     164:	7f 91       	pop	r23
     166:	6f 91       	pop	r22
     168:	5f 91       	pop	r21
     16a:	4f 91       	pop	r20
     16c:	3f 91       	pop	r19
     16e:	2f 91       	pop	r18
     170:	0f 90       	pop	r0
     172:	0f be       	out	0x3f, r0	; 63
     174:	0f 90       	pop	r0
     176:	1f 90       	pop	r1
     178:	18 95       	reti

0000017a <__vector_3>:

ISR(TIMER2_COMP_vect) {
     17a:	1f 92       	push	r1
     17c:	0f 92       	push	r0
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	0f 92       	push	r0
     182:	11 24       	eor	r1, r1
     184:	2f 93       	push	r18
     186:	3f 93       	push	r19
     188:	4f 93       	push	r20
     18a:	5f 93       	push	r21
     18c:	6f 93       	push	r22
     18e:	7f 93       	push	r23
     190:	8f 93       	push	r24
     192:	9f 93       	push	r25
     194:	af 93       	push	r26
     196:	bf 93       	push	r27
     198:	ef 93       	push	r30
     19a:	ff 93       	push	r31
     19c:	df 93       	push	r29
     19e:	cf 93       	push	r28
     1a0:	cd b7       	in	r28, 0x3d	; 61
     1a2:	de b7       	in	r29, 0x3e	; 62
	if (g_GPT_2_callBackPtr != NULL_PTR) {
     1a4:	80 91 88 00 	lds	r24, 0x0088
     1a8:	90 91 89 00 	lds	r25, 0x0089
     1ac:	00 97       	sbiw	r24, 0x00	; 0
     1ae:	61 f0       	breq	.+24     	; 0x1c8 <__vector_3+0x4e>
		(*g_GPT_2_callBackPtr)();
     1b0:	e0 91 88 00 	lds	r30, 0x0088
     1b4:	f0 91 89 00 	lds	r31, 0x0089
     1b8:	09 95       	icall
		/* if running mode is one shot mode -> disable the timer */
		if (GPT_2_runningMode == GPT_CH_MODE_ONESHOT) {
     1ba:	80 91 62 00 	lds	r24, 0x0062
     1be:	81 30       	cpi	r24, 0x01	; 1
     1c0:	19 f4       	brne	.+6      	; 0x1c8 <__vector_3+0x4e>
			GPT_disable(CHANNEL_ID_2);
     1c2:	82 e0       	ldi	r24, 0x02	; 2
     1c4:	0e 94 3b 02 	call	0x476	; 0x476 <GPT_disable>
		}
	}
}
     1c8:	cf 91       	pop	r28
     1ca:	df 91       	pop	r29
     1cc:	ff 91       	pop	r31
     1ce:	ef 91       	pop	r30
     1d0:	bf 91       	pop	r27
     1d2:	af 91       	pop	r26
     1d4:	9f 91       	pop	r25
     1d6:	8f 91       	pop	r24
     1d8:	7f 91       	pop	r23
     1da:	6f 91       	pop	r22
     1dc:	5f 91       	pop	r21
     1de:	4f 91       	pop	r20
     1e0:	3f 91       	pop	r19
     1e2:	2f 91       	pop	r18
     1e4:	0f 90       	pop	r0
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	0f 90       	pop	r0
     1ea:	1f 90       	pop	r1
     1ec:	18 95       	reti

000001ee <GPT_init>:
 *  [Function Name]:  GPT_init
 *  [Description]  :  This function is responsible for initializing the GPT Driver
 *  [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/

void GPT_init(const GPT_configType *GPT_configStructurePtr) {
     1ee:	df 93       	push	r29
     1f0:	cf 93       	push	r28
     1f2:	00 d0       	rcall	.+0      	; 0x1f4 <GPT_init+0x6>
     1f4:	00 d0       	rcall	.+0      	; 0x1f6 <GPT_init+0x8>
     1f6:	0f 92       	push	r0
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
     1fc:	9b 83       	std	Y+3, r25	; 0x03
     1fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 counter = ZERO;
     200:	19 82       	std	Y+1, r1	; 0x01
	GPT_timerStructurePtr = GPT_configStructurePtr->Timers_Channels;
     202:	8a 81       	ldd	r24, Y+2	; 0x02
     204:	9b 81       	ldd	r25, Y+3	; 0x03
     206:	90 93 8b 00 	sts	0x008B, r25
     20a:	80 93 8a 00 	sts	0x008A, r24
     20e:	b5 c0       	rjmp	.+362    	; 0x37a <GPT_init+0x18c>
	/* looping over all timer channels */
	while (counter < NUM_TIMERS) {
		/* if timer is initialized, configure the timer with the required configurations,
		 * if not, go to the next timer channel
		 */
		if (GPT_timerStructurePtr->intializedNotIntializedConfig
     210:	e0 91 8a 00 	lds	r30, 0x008A
     214:	f0 91 8b 00 	lds	r31, 0x008B
     218:	81 81       	ldd	r24, Z+1	; 0x01
     21a:	81 30       	cpi	r24, 0x01	; 1
     21c:	09 f0       	breq	.+2      	; 0x220 <GPT_init+0x32>
     21e:	a1 c0       	rjmp	.+322    	; 0x362 <GPT_init+0x174>
				== GPT_CHANNEL_INTIALIZED) {

			switch (GPT_timerStructurePtr->channelNumberConfig) {
     220:	e0 91 8a 00 	lds	r30, 0x008A
     224:	f0 91 8b 00 	lds	r31, 0x008B
     228:	80 81       	ld	r24, Z
     22a:	28 2f       	mov	r18, r24
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	3d 83       	std	Y+5, r19	; 0x05
     230:	2c 83       	std	Y+4, r18	; 0x04
     232:	8c 81       	ldd	r24, Y+4	; 0x04
     234:	9d 81       	ldd	r25, Y+5	; 0x05
     236:	81 30       	cpi	r24, 0x01	; 1
     238:	91 05       	cpc	r25, r1
     23a:	a9 f1       	breq	.+106    	; 0x2a6 <GPT_init+0xb8>
     23c:	2c 81       	ldd	r18, Y+4	; 0x04
     23e:	3d 81       	ldd	r19, Y+5	; 0x05
     240:	22 30       	cpi	r18, 0x02	; 2
     242:	31 05       	cpc	r19, r1
     244:	09 f4       	brne	.+2      	; 0x248 <GPT_init+0x5a>
     246:	64 c0       	rjmp	.+200    	; 0x310 <GPT_init+0x122>
     248:	8c 81       	ldd	r24, Y+4	; 0x04
     24a:	9d 81       	ldd	r25, Y+5	; 0x05
     24c:	00 97       	sbiw	r24, 0x00	; 0
     24e:	09 f0       	breq	.+2      	; 0x252 <GPT_init+0x64>
     250:	88 c0       	rjmp	.+272    	; 0x362 <GPT_init+0x174>
			case CHANNEL_ID_0:
				/* set initial value of the counter to zero */
				TCNT0 = ZERO;
     252:	e2 e5       	ldi	r30, 0x52	; 82
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	10 82       	st	Z, r1
				/* set number of ticks */
				OCR0 = GPT_timerStructurePtr->ticksNumberConfig;
     258:	ac e5       	ldi	r26, 0x5C	; 92
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	e0 91 8a 00 	lds	r30, 0x008A
     260:	f0 91 8b 00 	lds	r31, 0x008B
     264:	82 81       	ldd	r24, Z+2	; 0x02
     266:	93 81       	ldd	r25, Z+3	; 0x03
     268:	8c 93       	st	X, r24
				/* set timer mode to compare match */
				TCCR0 = (TCCR0 & 0b10000111) | (ONE) << (WGM01);
     26a:	a3 e5       	ldi	r26, 0x53	; 83
     26c:	b0 e0       	ldi	r27, 0x00	; 0
     26e:	e3 e5       	ldi	r30, 0x53	; 83
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	80 81       	ld	r24, Z
     274:	87 78       	andi	r24, 0x87	; 135
     276:	88 60       	ori	r24, 0x08	; 8
     278:	8c 93       	st	X, r24
				TCCR0 = (TCCR0 & 0b01111111) | (ONE) << (FOC0);
     27a:	a3 e5       	ldi	r26, 0x53	; 83
     27c:	b0 e0       	ldi	r27, 0x00	; 0
     27e:	e3 e5       	ldi	r30, 0x53	; 83
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	80 68       	ori	r24, 0x80	; 128
     286:	8c 93       	st	X, r24
				/* get prescaler value */
				GPT_0_prescalerValue =
     288:	e0 91 8a 00 	lds	r30, 0x008A
     28c:	f0 91 8b 00 	lds	r31, 0x008B
     290:	84 81       	ldd	r24, Z+4	; 0x04
     292:	80 93 8c 00 	sts	0x008C, r24
						GPT_timerStructurePtr->clockPrescalerConfig;
				/* get timer running mode */
				GPT_0_runningMode =
     296:	e0 91 8a 00 	lds	r30, 0x008A
     29a:	f0 91 8b 00 	lds	r31, 0x008B
     29e:	85 81       	ldd	r24, Z+5	; 0x05
     2a0:	80 93 60 00 	sts	0x0060, r24
     2a4:	5e c0       	rjmp	.+188    	; 0x362 <GPT_init+0x174>
						GPT_timerStructurePtr->continousNotContinousModeConfig;
				break;
			case CHANNEL_ID_1:
				/* set initial value of the counter to zero */
				TCNT1 = ZERO;
     2a6:	ec e4       	ldi	r30, 0x4C	; 76
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	11 82       	std	Z+1, r1	; 0x01
     2ac:	10 82       	st	Z, r1
				/* set number of ticks */
				OCR1A = GPT_timerStructurePtr->ticksNumberConfig;
     2ae:	aa e4       	ldi	r26, 0x4A	; 74
     2b0:	b0 e0       	ldi	r27, 0x00	; 0
     2b2:	e0 91 8a 00 	lds	r30, 0x008A
     2b6:	f0 91 8b 00 	lds	r31, 0x008B
     2ba:	82 81       	ldd	r24, Z+2	; 0x02
     2bc:	93 81       	ldd	r25, Z+3	; 0x03
     2be:	11 96       	adiw	r26, 0x01	; 1
     2c0:	9c 93       	st	X, r25
     2c2:	8e 93       	st	-X, r24
				/* get prescaler value */
				GPT_1_prescalerValue =
     2c4:	e0 91 8a 00 	lds	r30, 0x008A
     2c8:	f0 91 8b 00 	lds	r31, 0x008B
     2cc:	84 81       	ldd	r24, Z+4	; 0x04
     2ce:	80 93 8d 00 	sts	0x008D, r24
						GPT_timerStructurePtr->clockPrescalerConfig;
				/* set timer mode to compare match */
				TCCR1B = (TCCR1B & 0b111110111) | (ONE) << (WGM12);
     2d2:	ae e4       	ldi	r26, 0x4E	; 78
     2d4:	b0 e0       	ldi	r27, 0x00	; 0
     2d6:	ee e4       	ldi	r30, 0x4E	; 78
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	80 81       	ld	r24, Z
     2dc:	88 60       	ori	r24, 0x08	; 8
     2de:	8c 93       	st	X, r24
				TCCR1A = (TCCR1A & 0b111110111) | (ONE) << (FOC1B);
     2e0:	af e4       	ldi	r26, 0x4F	; 79
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	ef e4       	ldi	r30, 0x4F	; 79
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	80 81       	ld	r24, Z
     2ea:	83 7f       	andi	r24, 0xF3	; 243
     2ec:	84 60       	ori	r24, 0x04	; 4
     2ee:	8c 93       	st	X, r24
				TCCR1A = (TCCR1A & 0b111111011) | (ONE) << (FOC1A);
     2f0:	af e4       	ldi	r26, 0x4F	; 79
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	ef e4       	ldi	r30, 0x4F	; 79
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	80 81       	ld	r24, Z
     2fa:	83 7f       	andi	r24, 0xF3	; 243
     2fc:	88 60       	ori	r24, 0x08	; 8
     2fe:	8c 93       	st	X, r24
				/* get timer running mode */
				GPT_1_runningMode =
     300:	e0 91 8a 00 	lds	r30, 0x008A
     304:	f0 91 8b 00 	lds	r31, 0x008B
     308:	85 81       	ldd	r24, Z+5	; 0x05
     30a:	80 93 61 00 	sts	0x0061, r24
     30e:	29 c0       	rjmp	.+82     	; 0x362 <GPT_init+0x174>
						GPT_timerStructurePtr->continousNotContinousModeConfig;
				break;
			case CHANNEL_ID_2:
				/* set initial value of the counter to zero */
				TCNT2 = ZERO;
     310:	e4 e4       	ldi	r30, 0x44	; 68
     312:	f0 e0       	ldi	r31, 0x00	; 0
     314:	10 82       	st	Z, r1
				/* set number of ticks */
				OCR2 = GPT_timerStructurePtr->ticksNumberConfig;
     316:	a3 e4       	ldi	r26, 0x43	; 67
     318:	b0 e0       	ldi	r27, 0x00	; 0
     31a:	e0 91 8a 00 	lds	r30, 0x008A
     31e:	f0 91 8b 00 	lds	r31, 0x008B
     322:	82 81       	ldd	r24, Z+2	; 0x02
     324:	93 81       	ldd	r25, Z+3	; 0x03
     326:	8c 93       	st	X, r24
				/* set timer mode to compare match */
				TCCR2 = (TCCR0 & 0b10000111) | (ONE) << (WGM21);
     328:	a5 e4       	ldi	r26, 0x45	; 69
     32a:	b0 e0       	ldi	r27, 0x00	; 0
     32c:	e3 e5       	ldi	r30, 0x53	; 83
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	80 81       	ld	r24, Z
     332:	87 78       	andi	r24, 0x87	; 135
     334:	88 60       	ori	r24, 0x08	; 8
     336:	8c 93       	st	X, r24
				TCCR2 = (TCCR0 & 0b01111111) | (ONE) << (FOC0);
     338:	a5 e4       	ldi	r26, 0x45	; 69
     33a:	b0 e0       	ldi	r27, 0x00	; 0
     33c:	e3 e5       	ldi	r30, 0x53	; 83
     33e:	f0 e0       	ldi	r31, 0x00	; 0
     340:	80 81       	ld	r24, Z
     342:	80 68       	ori	r24, 0x80	; 128
     344:	8c 93       	st	X, r24
				/* get prescaler value */
				GPT_2_prescalerValue =
     346:	e0 91 8a 00 	lds	r30, 0x008A
     34a:	f0 91 8b 00 	lds	r31, 0x008B
     34e:	84 81       	ldd	r24, Z+4	; 0x04
     350:	80 93 8e 00 	sts	0x008E, r24
						GPT_timerStructurePtr->clockPrescalerConfig;
				/* get timer running mode */
				GPT_2_runningMode =
     354:	e0 91 8a 00 	lds	r30, 0x008A
     358:	f0 91 8b 00 	lds	r31, 0x008B
     35c:	85 81       	ldd	r24, Z+5	; 0x05
     35e:	80 93 62 00 	sts	0x0062, r24
				break;
			default:
				break;
			}
		}
		GPT_timerStructurePtr++;
     362:	80 91 8a 00 	lds	r24, 0x008A
     366:	90 91 8b 00 	lds	r25, 0x008B
     36a:	06 96       	adiw	r24, 0x06	; 6
     36c:	90 93 8b 00 	sts	0x008B, r25
     370:	80 93 8a 00 	sts	0x008A, r24
		counter++;
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	8f 5f       	subi	r24, 0xFF	; 255
     378:	89 83       	std	Y+1, r24	; 0x01
void GPT_init(const GPT_configType *GPT_configStructurePtr) {
	uint8 counter = ZERO;
	GPT_timerStructurePtr = GPT_configStructurePtr->Timers_Channels;

	/* looping over all timer channels */
	while (counter < NUM_TIMERS) {
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	83 30       	cpi	r24, 0x03	; 3
     37e:	08 f4       	brcc	.+2      	; 0x382 <GPT_init+0x194>
     380:	47 cf       	rjmp	.-370    	; 0x210 <GPT_init+0x22>
			}
		}
		GPT_timerStructurePtr++;
		counter++;
	}
}
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
     38c:	cf 91       	pop	r28
     38e:	df 91       	pop	r29
     390:	08 95       	ret

00000392 <GPT_enable>:
/*----------------------------------------------------------------------------------------------------
 *  [Function Name]:  GPT_enable
 *  [Description]  :  This function is responsible for enabling the required Gpt channel
 *  [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void GPT_enable(uint8 channelID) {
     392:	df 93       	push	r29
     394:	cf 93       	push	r28
     396:	00 d0       	rcall	.+0      	; 0x398 <GPT_enable+0x6>
     398:	0f 92       	push	r0
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
     39e:	89 83       	std	Y+1, r24	; 0x01
	switch (channelID) {
     3a0:	89 81       	ldd	r24, Y+1	; 0x01
     3a2:	28 2f       	mov	r18, r24
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	3b 83       	std	Y+3, r19	; 0x03
     3a8:	2a 83       	std	Y+2, r18	; 0x02
     3aa:	8a 81       	ldd	r24, Y+2	; 0x02
     3ac:	9b 81       	ldd	r25, Y+3	; 0x03
     3ae:	81 30       	cpi	r24, 0x01	; 1
     3b0:	91 05       	cpc	r25, r1
     3b2:	31 f1       	breq	.+76     	; 0x400 <GPT_enable+0x6e>
     3b4:	2a 81       	ldd	r18, Y+2	; 0x02
     3b6:	3b 81       	ldd	r19, Y+3	; 0x03
     3b8:	22 30       	cpi	r18, 0x02	; 2
     3ba:	31 05       	cpc	r19, r1
     3bc:	e1 f1       	breq	.+120    	; 0x436 <GPT_enable+0xa4>
     3be:	8a 81       	ldd	r24, Y+2	; 0x02
     3c0:	9b 81       	ldd	r25, Y+3	; 0x03
     3c2:	00 97       	sbiw	r24, 0x00	; 0
     3c4:	09 f0       	breq	.+2      	; 0x3c8 <GPT_enable+0x36>
     3c6:	51 c0       	rjmp	.+162    	; 0x46a <__stack+0xb>
	case CHANNEL_ID_0:
		if (GPT_0_enableState == GPT_DISABLED) {
     3c8:	80 91 8f 00 	lds	r24, 0x008F
     3cc:	88 23       	and	r24, r24
     3ce:	09 f0       	breq	.+2      	; 0x3d2 <GPT_enable+0x40>
     3d0:	4c c0       	rjmp	.+152    	; 0x46a <__stack+0xb>
			GPT_0_enableState = GPT_ENABLED;
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 8f 00 	sts	0x008F, r24
			/* enable compare match interrupt */
			TIMSK = (TIMSK & 0b11111101) | ((ONE) << (OCIE0));
     3d8:	a9 e5       	ldi	r26, 0x59	; 89
     3da:	b0 e0       	ldi	r27, 0x00	; 0
     3dc:	e9 e5       	ldi	r30, 0x59	; 89
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	80 81       	ld	r24, Z
     3e2:	82 60       	ori	r24, 0x02	; 2
     3e4:	8c 93       	st	X, r24
			/* set the prescaler value */
			TCCR0 = (TCCR0 & 0b11111000)
     3e6:	a3 e5       	ldi	r26, 0x53	; 83
     3e8:	b0 e0       	ldi	r27, 0x00	; 0
     3ea:	e3 e5       	ldi	r30, 0x53	; 83
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	80 81       	ld	r24, Z
     3f0:	98 2f       	mov	r25, r24
     3f2:	98 7f       	andi	r25, 0xF8	; 248
     3f4:	80 91 8c 00 	lds	r24, 0x008C
     3f8:	87 70       	andi	r24, 0x07	; 7
     3fa:	89 2b       	or	r24, r25
     3fc:	8c 93       	st	X, r24
     3fe:	35 c0       	rjmp	.+106    	; 0x46a <__stack+0xb>
		} else {

		}
		break;
	case CHANNEL_ID_1:
		if (GPT_1_enableState == GPT_DISABLED) {
     400:	80 91 90 00 	lds	r24, 0x0090
     404:	88 23       	and	r24, r24
     406:	89 f5       	brne	.+98     	; 0x46a <__stack+0xb>
			GPT_1_enableState = GPT_ENABLED;
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	80 93 90 00 	sts	0x0090, r24
			/* enable compare match interrupt */
			TIMSK = (TIMSK & 0b11101111) | ((ONE) << (OCIE1A));
     40e:	a9 e5       	ldi	r26, 0x59	; 89
     410:	b0 e0       	ldi	r27, 0x00	; 0
     412:	e9 e5       	ldi	r30, 0x59	; 89
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	80 81       	ld	r24, Z
     418:	80 61       	ori	r24, 0x10	; 16
     41a:	8c 93       	st	X, r24
			/* set the prescaler value */
			TCCR1B = (TCCR0 & 0b11111000)
     41c:	ae e4       	ldi	r26, 0x4E	; 78
     41e:	b0 e0       	ldi	r27, 0x00	; 0
     420:	e3 e5       	ldi	r30, 0x53	; 83
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	80 81       	ld	r24, Z
     426:	98 2f       	mov	r25, r24
     428:	98 7f       	andi	r25, 0xF8	; 248
     42a:	80 91 8d 00 	lds	r24, 0x008D
     42e:	87 70       	andi	r24, 0x07	; 7
     430:	89 2b       	or	r24, r25
     432:	8c 93       	st	X, r24
     434:	1a c0       	rjmp	.+52     	; 0x46a <__stack+0xb>
		} else {

		}
		break;
	case CHANNEL_ID_2:
		if (GPT_2_enableState == GPT_DISABLED) {
     436:	80 91 91 00 	lds	r24, 0x0091
     43a:	88 23       	and	r24, r24
     43c:	b1 f4       	brne	.+44     	; 0x46a <__stack+0xb>
			GPT_2_enableState = GPT_ENABLED;
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	80 93 91 00 	sts	0x0091, r24
			/* enable compare match interrupt */
			TIMSK = (TIMSK & 0b01111111) | ((ONE) << (OCIE2));
     444:	a9 e5       	ldi	r26, 0x59	; 89
     446:	b0 e0       	ldi	r27, 0x00	; 0
     448:	e9 e5       	ldi	r30, 0x59	; 89
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	80 81       	ld	r24, Z
     44e:	80 68       	ori	r24, 0x80	; 128
     450:	8c 93       	st	X, r24
			/* set the prescaler value */
			TCCR2 = (TCCR0 & 0b11111000)
     452:	a5 e4       	ldi	r26, 0x45	; 69
     454:	b0 e0       	ldi	r27, 0x00	; 0
     456:	e3 e5       	ldi	r30, 0x53	; 83
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	80 81       	ld	r24, Z
     45c:	98 2f       	mov	r25, r24
     45e:	98 7f       	andi	r25, 0xF8	; 248
     460:	80 91 8e 00 	lds	r24, 0x008E
     464:	87 70       	andi	r24, 0x07	; 7
     466:	89 2b       	or	r24, r25
     468:	8c 93       	st	X, r24
		} else {

		}
		break;
	}
}
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	cf 91       	pop	r28
     472:	df 91       	pop	r29
     474:	08 95       	ret

00000476 <GPT_disable>:
 *  [Function Name]:  GPT_disable
 *  [Description]  :  This function is responsible for disabling the required Gpt channel
 *  [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/

void GPT_disable(uint8 channelID) {
     476:	df 93       	push	r29
     478:	cf 93       	push	r28
     47a:	00 d0       	rcall	.+0      	; 0x47c <GPT_disable+0x6>
     47c:	0f 92       	push	r0
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	89 83       	std	Y+1, r24	; 0x01
	switch (channelID) {
     484:	89 81       	ldd	r24, Y+1	; 0x01
     486:	28 2f       	mov	r18, r24
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	3b 83       	std	Y+3, r19	; 0x03
     48c:	2a 83       	std	Y+2, r18	; 0x02
     48e:	8a 81       	ldd	r24, Y+2	; 0x02
     490:	9b 81       	ldd	r25, Y+3	; 0x03
     492:	81 30       	cpi	r24, 0x01	; 1
     494:	91 05       	cpc	r25, r1
     496:	19 f1       	breq	.+70     	; 0x4de <GPT_disable+0x68>
     498:	2a 81       	ldd	r18, Y+2	; 0x02
     49a:	3b 81       	ldd	r19, Y+3	; 0x03
     49c:	22 30       	cpi	r18, 0x02	; 2
     49e:	31 05       	cpc	r19, r1
     4a0:	b9 f1       	breq	.+110    	; 0x510 <GPT_disable+0x9a>
     4a2:	8a 81       	ldd	r24, Y+2	; 0x02
     4a4:	9b 81       	ldd	r25, Y+3	; 0x03
     4a6:	00 97       	sbiw	r24, 0x00	; 0
     4a8:	09 f0       	breq	.+2      	; 0x4ac <GPT_disable+0x36>
     4aa:	49 c0       	rjmp	.+146    	; 0x53e <GPT_disable+0xc8>
	case CHANNEL_ID_0:
		if (GPT_0_enableState == GPT_ENABLED) {
     4ac:	80 91 8f 00 	lds	r24, 0x008F
     4b0:	81 30       	cpi	r24, 0x01	; 1
     4b2:	09 f0       	breq	.+2      	; 0x4b6 <GPT_disable+0x40>
     4b4:	44 c0       	rjmp	.+136    	; 0x53e <GPT_disable+0xc8>
			GPT_0_enableState = GPT_DISABLED;
     4b6:	10 92 8f 00 	sts	0x008F, r1
			TCNT0 = 0;
     4ba:	e2 e5       	ldi	r30, 0x52	; 82
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	10 82       	st	Z, r1
			/* disable compare match interrupt */
			TIMSK = (TIMSK & 0b11111101) | ((ONE) << (OCIE0));
     4c0:	a9 e5       	ldi	r26, 0x59	; 89
     4c2:	b0 e0       	ldi	r27, 0x00	; 0
     4c4:	e9 e5       	ldi	r30, 0x59	; 89
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	80 81       	ld	r24, Z
     4ca:	82 60       	ori	r24, 0x02	; 2
     4cc:	8c 93       	st	X, r24
			/* set the clock prescaler to no clock source */
			TCCR0 = (TCCR0 & 0b11111000) | ((ZERO & 0b00000111) << (CS00));
     4ce:	a3 e5       	ldi	r26, 0x53	; 83
     4d0:	b0 e0       	ldi	r27, 0x00	; 0
     4d2:	e3 e5       	ldi	r30, 0x53	; 83
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	80 81       	ld	r24, Z
     4d8:	88 7f       	andi	r24, 0xF8	; 248
     4da:	8c 93       	st	X, r24
     4dc:	30 c0       	rjmp	.+96     	; 0x53e <GPT_disable+0xc8>

		}

		break;
	case CHANNEL_ID_1:
		if (GPT_1_enableState == GPT_ENABLED) {
     4de:	80 91 90 00 	lds	r24, 0x0090
     4e2:	81 30       	cpi	r24, 0x01	; 1
     4e4:	61 f5       	brne	.+88     	; 0x53e <GPT_disable+0xc8>
			GPT_1_enableState = GPT_DISABLED;
     4e6:	10 92 90 00 	sts	0x0090, r1
			TCNT1 = 0;
     4ea:	ec e4       	ldi	r30, 0x4C	; 76
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	11 82       	std	Z+1, r1	; 0x01
     4f0:	10 82       	st	Z, r1
			/* disable compare match interrupt */
			TIMSK = (TIMSK & 0b11101111) | ((ONE) << (OCIE1A));
     4f2:	a9 e5       	ldi	r26, 0x59	; 89
     4f4:	b0 e0       	ldi	r27, 0x00	; 0
     4f6:	e9 e5       	ldi	r30, 0x59	; 89
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	80 81       	ld	r24, Z
     4fc:	80 61       	ori	r24, 0x10	; 16
     4fe:	8c 93       	st	X, r24
			/* set the clock prescaler to no clock source */
			TCCR1B = (TCCR0 & 0b11111000) | ((ZERO & 0b00000111) << (CS00));
     500:	ae e4       	ldi	r26, 0x4E	; 78
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e3 e5       	ldi	r30, 0x53	; 83
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	80 81       	ld	r24, Z
     50a:	88 7f       	andi	r24, 0xF8	; 248
     50c:	8c 93       	st	X, r24
     50e:	17 c0       	rjmp	.+46     	; 0x53e <GPT_disable+0xc8>

		}

		break;
	case CHANNEL_ID_2:
		if (GPT_2_enableState == GPT_ENABLED) {
     510:	80 91 91 00 	lds	r24, 0x0091
     514:	81 30       	cpi	r24, 0x01	; 1
     516:	99 f4       	brne	.+38     	; 0x53e <GPT_disable+0xc8>
			GPT_2_enableState = GPT_DISABLED;
     518:	10 92 91 00 	sts	0x0091, r1
			TCNT2 = 0;
     51c:	e4 e4       	ldi	r30, 0x44	; 68
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	10 82       	st	Z, r1
			/* disable compare match interrupt */
			TIMSK = (TIMSK & 0b01111111) | ((ONE) << (OCIE2));
     522:	a9 e5       	ldi	r26, 0x59	; 89
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	e9 e5       	ldi	r30, 0x59	; 89
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	80 81       	ld	r24, Z
     52c:	80 68       	ori	r24, 0x80	; 128
     52e:	8c 93       	st	X, r24
			/* set the clock prescaler to no clock source */
			TCCR2 = (TCCR0 & 0b11111000) | ((ZERO & 0b00000111) << (CS00));
     530:	a5 e4       	ldi	r26, 0x45	; 69
     532:	b0 e0       	ldi	r27, 0x00	; 0
     534:	e3 e5       	ldi	r30, 0x53	; 83
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	80 81       	ld	r24, Z
     53a:	88 7f       	andi	r24, 0xF8	; 248
     53c:	8c 93       	st	X, r24

		break;
	default:
		break;
	}
}
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	cf 91       	pop	r28
     546:	df 91       	pop	r29
     548:	08 95       	ret

0000054a <GPT_0_setCallBack>:
 *  [Function Name]:  GPT_0_setCallBack
 *  [Description]  :  This function is responsible for getting the address of the function which
 *  					will be executed every Timer 0 compare match
 *  [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void GPT_0_setCallBack(void (*GPT_0_setCallBack_Ptr)(void)) {
     54a:	df 93       	push	r29
     54c:	cf 93       	push	r28
     54e:	00 d0       	rcall	.+0      	; 0x550 <GPT_0_setCallBack+0x6>
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
     554:	9a 83       	std	Y+2, r25	; 0x02
     556:	89 83       	std	Y+1, r24	; 0x01
	g_GPT_0_callBackPtr = GPT_0_setCallBack_Ptr;
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	9a 81       	ldd	r25, Y+2	; 0x02
     55c:	90 93 85 00 	sts	0x0085, r25
     560:	80 93 84 00 	sts	0x0084, r24
}
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	cf 91       	pop	r28
     56a:	df 91       	pop	r29
     56c:	08 95       	ret

0000056e <GPT_1_setCallBack>:
 *  [Function Name]:  GPT_1_setCallBack
 *  [Description]  :  This function is responsible for getting the address of the function which
 *  					will be executed every Timer 1 compare match
 *  [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void GPT_1_setCallBack(void (*GPT_1_setCallBack_Ptr)(void)) {
     56e:	df 93       	push	r29
     570:	cf 93       	push	r28
     572:	00 d0       	rcall	.+0      	; 0x574 <GPT_1_setCallBack+0x6>
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	9a 83       	std	Y+2, r25	; 0x02
     57a:	89 83       	std	Y+1, r24	; 0x01
	g_GPT_1_callBackPtr = GPT_1_setCallBack_Ptr;
     57c:	89 81       	ldd	r24, Y+1	; 0x01
     57e:	9a 81       	ldd	r25, Y+2	; 0x02
     580:	90 93 87 00 	sts	0x0087, r25
     584:	80 93 86 00 	sts	0x0086, r24
}
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	cf 91       	pop	r28
     58e:	df 91       	pop	r29
     590:	08 95       	ret

00000592 <GPT_2_setCallBack>:
 *  [Description]  :  This function is responsible for getting the address of the function which
 *  					will be executed every Timer 2 compare match
 *  [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/

void GPT_2_setCallBack(void (*GPT_2_setCallBack_Ptr)(void)) {
     592:	df 93       	push	r29
     594:	cf 93       	push	r28
     596:	00 d0       	rcall	.+0      	; 0x598 <GPT_2_setCallBack+0x6>
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
     59c:	9a 83       	std	Y+2, r25	; 0x02
     59e:	89 83       	std	Y+1, r24	; 0x01
	g_GPT_2_callBackPtr = GPT_2_setCallBack_Ptr;
     5a0:	89 81       	ldd	r24, Y+1	; 0x01
     5a2:	9a 81       	ldd	r25, Y+2	; 0x02
     5a4:	90 93 89 00 	sts	0x0089, r25
     5a8:	80 93 88 00 	sts	0x0088, r24
}
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	cf 91       	pop	r28
     5b2:	df 91       	pop	r29
     5b4:	08 95       	ret

000005b6 <TWI_init>:
 *  [Description]  :  This function is responsible for initializing the TWI Driver
 *  [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/

void TWI_init(const TWI_configType* TWI_configStructurePtr)
{
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	df 93       	push	r29
     5bc:	cf 93       	push	r28
     5be:	00 d0       	rcall	.+0      	; 0x5c0 <TWI_init+0xa>
     5c0:	00 d0       	rcall	.+0      	; 0x5c2 <TWI_init+0xc>
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
     5c6:	9c 83       	std	Y+4, r25	; 0x04
     5c8:	8b 83       	std	Y+3, r24	; 0x03
	uint8 result = ONE;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 twbsValue = TWI_configStructurePtr->clockPrescalerConfig;
     5ce:	eb 81       	ldd	r30, Y+3	; 0x03
     5d0:	fc 81       	ldd	r31, Y+4	; 0x04
     5d2:	80 81       	ld	r24, Z
     5d4:	89 83       	std	Y+1, r24	; 0x01
     5d6:	0b c0       	rjmp	.+22     	; 0x5ee <TWI_init+0x38>
	/* getting the value of pow(4,TWBs) */
	while (twbsValue != 0) {
	        result *= 4;
     5d8:	8a 81       	ldd	r24, Y+2	; 0x02
     5da:	88 2f       	mov	r24, r24
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	88 0f       	add	r24, r24
     5e0:	99 1f       	adc	r25, r25
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	8a 83       	std	Y+2, r24	; 0x02
	        twbsValue--;
     5e8:	89 81       	ldd	r24, Y+1	; 0x01
     5ea:	81 50       	subi	r24, 0x01	; 1
     5ec:	89 83       	std	Y+1, r24	; 0x01
void TWI_init(const TWI_configType* TWI_configStructurePtr)
{
	uint8 result = ONE;
	uint8 twbsValue = TWI_configStructurePtr->clockPrescalerConfig;
	/* getting the value of pow(4,TWBs) */
	while (twbsValue != 0) {
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	88 23       	and	r24, r24
     5f2:	91 f7       	brne	.-28     	; 0x5d8 <TWI_init+0x22>
	        result *= 4;
	        twbsValue--;
	    }
	/* calculation of TWBR value */
    TWBR = (((F_CPU/TWI_FREQ)-16)/(2*result));
     5f4:	00 e2       	ldi	r16, 0x20	; 32
     5f6:	10 e0       	ldi	r17, 0x00	; 0
     5f8:	8a 81       	ldd	r24, Y+2	; 0x02
     5fa:	88 2f       	mov	r24, r24
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	88 0f       	add	r24, r24
     600:	99 1f       	adc	r25, r25
     602:	9c 01       	movw	r18, r24
     604:	44 27       	eor	r20, r20
     606:	37 fd       	sbrc	r19, 7
     608:	40 95       	com	r20
     60a:	54 2f       	mov	r21, r20
     60c:	84 e0       	ldi	r24, 0x04	; 4
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	a0 e0       	ldi	r26, 0x00	; 0
     612:	b0 e0       	ldi	r27, 0x00	; 0
     614:	bc 01       	movw	r22, r24
     616:	cd 01       	movw	r24, r26
     618:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__udivmodsi4>
     61c:	da 01       	movw	r26, r20
     61e:	c9 01       	movw	r24, r18
     620:	f8 01       	movw	r30, r16
     622:	80 83       	st	Z, r24

    /* Set Clock Prescaler */
    TWSR = TWI_configStructurePtr->clockPrescalerConfig;
     624:	a1 e2       	ldi	r26, 0x21	; 33
     626:	b0 e0       	ldi	r27, 0x00	; 0
     628:	eb 81       	ldd	r30, Y+3	; 0x03
     62a:	fc 81       	ldd	r31, Y+4	; 0x04
     62c:	80 81       	ld	r24, Z
     62e:	8c 93       	st	X, r24
	
    /* Configure Slave Address */
    TWAR = ((TWI_configStructurePtr->TWI_slaveAddress)<<1);
     630:	a2 e2       	ldi	r26, 0x22	; 34
     632:	b0 e0       	ldi	r27, 0x00	; 0
     634:	eb 81       	ldd	r30, Y+3	; 0x03
     636:	fc 81       	ldd	r31, Y+4	; 0x04
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	88 0f       	add	r24, r24
     63c:	8c 93       	st	X, r24

    /* Set General Call Recognition Mode Configuration */
	TWAR = (TWAR & 0b11111110) | ((TWI_configStructurePtr->generalCallRecognitionEnableModeConfig & 0x01)<<(TWGCE));
     63e:	a2 e2       	ldi	r26, 0x22	; 34
     640:	b0 e0       	ldi	r27, 0x00	; 0
     642:	e2 e2       	ldi	r30, 0x22	; 34
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	80 81       	ld	r24, Z
     648:	98 2f       	mov	r25, r24
     64a:	9e 7f       	andi	r25, 0xFE	; 254
     64c:	eb 81       	ldd	r30, Y+3	; 0x03
     64e:	fc 81       	ldd	r31, Y+4	; 0x04
     650:	81 81       	ldd	r24, Z+1	; 0x01
     652:	81 70       	andi	r24, 0x01	; 1
     654:	89 2b       	or	r24, r25
     656:	8c 93       	st	X, r24

	/* Enable TWI */
    TWCR = (TWCR & 0b11111011) | ((ONE<<TWEN));
     658:	a6 e5       	ldi	r26, 0x56	; 86
     65a:	b0 e0       	ldi	r27, 0x00	; 0
     65c:	e6 e5       	ldi	r30, 0x56	; 86
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	80 81       	ld	r24, Z
     662:	84 60       	ori	r24, 0x04	; 4
     664:	8c 93       	st	X, r24
	
	/* Enable pull up resistors at SCL and SDA Pins */
	SET_BIT(PORTC,4);
     666:	a5 e3       	ldi	r26, 0x35	; 53
     668:	b0 e0       	ldi	r27, 0x00	; 0
     66a:	e5 e3       	ldi	r30, 0x35	; 53
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	80 81       	ld	r24, Z
     670:	80 61       	ori	r24, 0x10	; 16
     672:	8c 93       	st	X, r24
	SET_BIT(PORTC,5);
     674:	a5 e3       	ldi	r26, 0x35	; 53
     676:	b0 e0       	ldi	r27, 0x00	; 0
     678:	e5 e3       	ldi	r30, 0x35	; 53
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	80 81       	ld	r24, Z
     67e:	80 62       	ori	r24, 0x20	; 32
     680:	8c 93       	st	X, r24
}
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0
     68a:	cf 91       	pop	r28
     68c:	df 91       	pop	r29
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	08 95       	ret

00000694 <TWI_start>:
 *  [Description]  :  This function is responsible for sending start bit
 *  [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/

void TWI_start(void)
{
     694:	df 93       	push	r29
     696:	cf 93       	push	r28
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     69c:	e6 e5       	ldi	r30, 0x56	; 86
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	84 ea       	ldi	r24, 0xA4	; 164
     6a2:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     6a4:	e6 e5       	ldi	r30, 0x56	; 86
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	80 81       	ld	r24, Z
     6aa:	88 23       	and	r24, r24
     6ac:	dc f7       	brge	.-10     	; 0x6a4 <TWI_start+0x10>
}
     6ae:	cf 91       	pop	r28
     6b0:	df 91       	pop	r29
     6b2:	08 95       	ret

000006b4 <TWI_stop>:
 *  [Description]  :  This function is responsible for sending stop bit
 *  [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/

void TWI_stop(void)
{
     6b4:	df 93       	push	r29
     6b6:	cf 93       	push	r28
     6b8:	cd b7       	in	r28, 0x3d	; 61
     6ba:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     6bc:	e6 e5       	ldi	r30, 0x56	; 86
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	84 e9       	ldi	r24, 0x94	; 148
     6c2:	80 83       	st	Z, r24
}
     6c4:	cf 91       	pop	r28
     6c6:	df 91       	pop	r29
     6c8:	08 95       	ret

000006ca <TWI_write>:
 *  [Description]  :  This function is responsible for writing data
 *  [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/

void TWI_write(uint8 data)
{
     6ca:	df 93       	push	r29
     6cc:	cf 93       	push	r28
     6ce:	0f 92       	push	r0
     6d0:	cd b7       	in	r28, 0x3d	; 61
     6d2:	de b7       	in	r29, 0x3e	; 62
     6d4:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
     6d6:	e3 e2       	ldi	r30, 0x23	; 35
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	89 81       	ldd	r24, Y+1	; 0x01
     6dc:	80 83       	st	Z, r24

    TWCR = (1 << TWINT) | (1 << TWEN);
     6de:	e6 e5       	ldi	r30, 0x56	; 86
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	84 e8       	ldi	r24, 0x84	; 132
     6e4:	80 83       	st	Z, r24

    /* Wait for data is send successfully */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     6e6:	e6 e5       	ldi	r30, 0x56	; 86
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	80 81       	ld	r24, Z
     6ec:	88 23       	and	r24, r24
     6ee:	dc f7       	brge	.-10     	; 0x6e6 <TWI_write+0x1c>
}
     6f0:	0f 90       	pop	r0
     6f2:	cf 91       	pop	r28
     6f4:	df 91       	pop	r29
     6f6:	08 95       	ret

000006f8 <TWI_readWithACK>:
 *  [Function Name]:  TWI_readWithACK
 *  [Description]  :  This function is responsible for reading data with sending ACK
 *  [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
uint8 TWI_readWithACK(void)
{
     6f8:	df 93       	push	r29
     6fa:	cf 93       	push	r28
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62

    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     700:	e6 e5       	ldi	r30, 0x56	; 86
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	84 ec       	ldi	r24, 0xC4	; 196
     706:	80 83       	st	Z, r24
    /* Wait for data received successfully */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     708:	e6 e5       	ldi	r30, 0x56	; 86
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	80 81       	ld	r24, Z
     70e:	88 23       	and	r24, r24
     710:	dc f7       	brge	.-10     	; 0x708 <TWI_readWithACK+0x10>

    /* Read Data */
    return TWDR;
     712:	e3 e2       	ldi	r30, 0x23	; 35
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	80 81       	ld	r24, Z
}
     718:	cf 91       	pop	r28
     71a:	df 91       	pop	r29
     71c:	08 95       	ret

0000071e <TWI_readWithNACK>:
 *  [Function Name]:  TWI_readWithNACK
 *  [Description]  :  This function is responsible for reading data without sending ACK
 *  [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
uint8 TWI_readWithNACK(void)
{
     71e:	df 93       	push	r29
     720:	cf 93       	push	r28
     722:	cd b7       	in	r28, 0x3d	; 61
     724:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWEN);
     726:	e6 e5       	ldi	r30, 0x56	; 86
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	84 e8       	ldi	r24, 0x84	; 132
     72c:	80 83       	st	Z, r24

    /* Wait for  (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     72e:	e6 e5       	ldi	r30, 0x56	; 86
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	80 81       	ld	r24, Z
     734:	88 23       	and	r24, r24
     736:	dc f7       	brge	.-10     	; 0x72e <TWI_readWithNACK+0x10>

    /* Read Data */
    return TWDR;
     738:	e3 e2       	ldi	r30, 0x23	; 35
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	80 81       	ld	r24, Z
}
     73e:	cf 91       	pop	r28
     740:	df 91       	pop	r29
     742:	08 95       	ret

00000744 <TWI_getStatus>:
 *  [Function Name]:  TWI_getStatus
 *  [Description]  :  This function is responsible for getting the status of TWI Driver
 *  [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
uint8 TWI_getStatus(void)
{
     744:	df 93       	push	r29
     746:	cf 93       	push	r28
     748:	0f 92       	push	r0
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* get status bits */
    status = TWSR & 0xF8;
     74e:	e1 e2       	ldi	r30, 0x21	; 33
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	80 81       	ld	r24, Z
     754:	88 7f       	andi	r24, 0xF8	; 248
     756:	89 83       	std	Y+1, r24	; 0x01
    return status;
     758:	89 81       	ldd	r24, Y+1	; 0x01
}
     75a:	0f 90       	pop	r0
     75c:	cf 91       	pop	r28
     75e:	df 91       	pop	r29
     760:	08 95       	ret

00000762 <__vector_11>:
static volatile void (*	g_USART_TXC_callBackPtr)(void) = NULL_PTR;
static volatile void (*	g_USART_RXC_callBackPtr)(void) = NULL_PTR;
static volatile void (*	g_USART_UDRE_callBackPtr)(void) = NULL_PTR;

/*----------------------------------------------ISR---------------------------------------------------*/
ISR(USART_RXC_vect){
     762:	1f 92       	push	r1
     764:	0f 92       	push	r0
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	0f 92       	push	r0
     76a:	11 24       	eor	r1, r1
     76c:	2f 93       	push	r18
     76e:	3f 93       	push	r19
     770:	4f 93       	push	r20
     772:	5f 93       	push	r21
     774:	6f 93       	push	r22
     776:	7f 93       	push	r23
     778:	8f 93       	push	r24
     77a:	9f 93       	push	r25
     77c:	af 93       	push	r26
     77e:	bf 93       	push	r27
     780:	ef 93       	push	r30
     782:	ff 93       	push	r31
     784:	df 93       	push	r29
     786:	cf 93       	push	r28
     788:	cd b7       	in	r28, 0x3d	; 61
     78a:	de b7       	in	r29, 0x3e	; 62
	if (g_USART_RXC_callBackPtr != NULL_PTR) {
     78c:	80 91 94 00 	lds	r24, 0x0094
     790:	90 91 95 00 	lds	r25, 0x0095
     794:	00 97       	sbiw	r24, 0x00	; 0
     796:	29 f0       	breq	.+10     	; 0x7a2 <__vector_11+0x40>
			(*g_USART_RXC_callBackPtr)();
     798:	e0 91 94 00 	lds	r30, 0x0094
     79c:	f0 91 95 00 	lds	r31, 0x0095
     7a0:	09 95       	icall
	}
}
     7a2:	cf 91       	pop	r28
     7a4:	df 91       	pop	r29
     7a6:	ff 91       	pop	r31
     7a8:	ef 91       	pop	r30
     7aa:	bf 91       	pop	r27
     7ac:	af 91       	pop	r26
     7ae:	9f 91       	pop	r25
     7b0:	8f 91       	pop	r24
     7b2:	7f 91       	pop	r23
     7b4:	6f 91       	pop	r22
     7b6:	5f 91       	pop	r21
     7b8:	4f 91       	pop	r20
     7ba:	3f 91       	pop	r19
     7bc:	2f 91       	pop	r18
     7be:	0f 90       	pop	r0
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	0f 90       	pop	r0
     7c4:	1f 90       	pop	r1
     7c6:	18 95       	reti

000007c8 <__vector_13>:

ISR(USART_TXC_vect){
     7c8:	1f 92       	push	r1
     7ca:	0f 92       	push	r0
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	0f 92       	push	r0
     7d0:	11 24       	eor	r1, r1
     7d2:	2f 93       	push	r18
     7d4:	3f 93       	push	r19
     7d6:	4f 93       	push	r20
     7d8:	5f 93       	push	r21
     7da:	6f 93       	push	r22
     7dc:	7f 93       	push	r23
     7de:	8f 93       	push	r24
     7e0:	9f 93       	push	r25
     7e2:	af 93       	push	r26
     7e4:	bf 93       	push	r27
     7e6:	ef 93       	push	r30
     7e8:	ff 93       	push	r31
     7ea:	df 93       	push	r29
     7ec:	cf 93       	push	r28
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
	if (g_USART_TXC_callBackPtr != NULL_PTR) {
     7f2:	80 91 92 00 	lds	r24, 0x0092
     7f6:	90 91 93 00 	lds	r25, 0x0093
     7fa:	00 97       	sbiw	r24, 0x00	; 0
     7fc:	29 f0       	breq	.+10     	; 0x808 <__vector_13+0x40>
			(*g_USART_TXC_callBackPtr)();
     7fe:	e0 91 92 00 	lds	r30, 0x0092
     802:	f0 91 93 00 	lds	r31, 0x0093
     806:	09 95       	icall
	}
}
     808:	cf 91       	pop	r28
     80a:	df 91       	pop	r29
     80c:	ff 91       	pop	r31
     80e:	ef 91       	pop	r30
     810:	bf 91       	pop	r27
     812:	af 91       	pop	r26
     814:	9f 91       	pop	r25
     816:	8f 91       	pop	r24
     818:	7f 91       	pop	r23
     81a:	6f 91       	pop	r22
     81c:	5f 91       	pop	r21
     81e:	4f 91       	pop	r20
     820:	3f 91       	pop	r19
     822:	2f 91       	pop	r18
     824:	0f 90       	pop	r0
     826:	0f be       	out	0x3f, r0	; 63
     828:	0f 90       	pop	r0
     82a:	1f 90       	pop	r1
     82c:	18 95       	reti

0000082e <__vector_12>:

ISR(USART_UDRE_vect){
     82e:	1f 92       	push	r1
     830:	0f 92       	push	r0
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	0f 92       	push	r0
     836:	11 24       	eor	r1, r1
     838:	2f 93       	push	r18
     83a:	3f 93       	push	r19
     83c:	4f 93       	push	r20
     83e:	5f 93       	push	r21
     840:	6f 93       	push	r22
     842:	7f 93       	push	r23
     844:	8f 93       	push	r24
     846:	9f 93       	push	r25
     848:	af 93       	push	r26
     84a:	bf 93       	push	r27
     84c:	ef 93       	push	r30
     84e:	ff 93       	push	r31
     850:	df 93       	push	r29
     852:	cf 93       	push	r28
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
	if (g_USART_UDRE_callBackPtr != NULL_PTR) {
     858:	80 91 96 00 	lds	r24, 0x0096
     85c:	90 91 97 00 	lds	r25, 0x0097
     860:	00 97       	sbiw	r24, 0x00	; 0
     862:	29 f0       	breq	.+10     	; 0x86e <__vector_12+0x40>
			(*g_USART_UDRE_callBackPtr)();
     864:	e0 91 96 00 	lds	r30, 0x0096
     868:	f0 91 97 00 	lds	r31, 0x0097
     86c:	09 95       	icall
	}
}
     86e:	cf 91       	pop	r28
     870:	df 91       	pop	r29
     872:	ff 91       	pop	r31
     874:	ef 91       	pop	r30
     876:	bf 91       	pop	r27
     878:	af 91       	pop	r26
     87a:	9f 91       	pop	r25
     87c:	8f 91       	pop	r24
     87e:	7f 91       	pop	r23
     880:	6f 91       	pop	r22
     882:	5f 91       	pop	r21
     884:	4f 91       	pop	r20
     886:	3f 91       	pop	r19
     888:	2f 91       	pop	r18
     88a:	0f 90       	pop	r0
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	0f 90       	pop	r0
     890:	1f 90       	pop	r1
     892:	18 95       	reti

00000894 <USART_init>:
 *  [Description]  :  This function is responsible for sending a byte
 *  [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/

void USART_init(const USART_configType* USART_configStructurePtr)
{
     894:	df 93       	push	r29
     896:	cf 93       	push	r28
     898:	00 d0       	rcall	.+0      	; 0x89a <USART_init+0x6>
     89a:	00 d0       	rcall	.+0      	; 0x89c <USART_init+0x8>
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	8b 83       	std	Y+3, r24	; 0x03

	uint16 UBRR_registerValue = 0;
     8a4:	1a 82       	std	Y+2, r1	; 0x02
     8a6:	19 82       	std	Y+1, r1	; 0x01
	/* Set the double transmission mode configuration */
	UCSRA = (UCSRA & 0b11111101) | (( USART_configStructurePtr->doubleTransmissionModeConfig & 0b00000001)<<(U2X));
     8a8:	ab e2       	ldi	r26, 0x2B	; 43
     8aa:	b0 e0       	ldi	r27, 0x00	; 0
     8ac:	eb e2       	ldi	r30, 0x2B	; 43
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	80 81       	ld	r24, Z
     8b2:	28 2f       	mov	r18, r24
     8b4:	2d 7f       	andi	r18, 0xFD	; 253
     8b6:	eb 81       	ldd	r30, Y+3	; 0x03
     8b8:	fc 81       	ldd	r31, Y+4	; 0x04
     8ba:	80 81       	ld	r24, Z
     8bc:	88 2f       	mov	r24, r24
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	81 70       	andi	r24, 0x01	; 1
     8c2:	90 70       	andi	r25, 0x00	; 0
     8c4:	88 0f       	add	r24, r24
     8c6:	99 1f       	adc	r25, r25
     8c8:	82 2b       	or	r24, r18
     8ca:	8c 93       	st	X, r24

	/* Set the multi processor communication mode configuration */
	UCSRA = (UCSRA & 0b11111110) | (( USART_configStructurePtr->multiProcessorCommunicationModeConfig & 0b00000001)<<(MPCM));
     8cc:	ab e2       	ldi	r26, 0x2B	; 43
     8ce:	b0 e0       	ldi	r27, 0x00	; 0
     8d0:	eb e2       	ldi	r30, 0x2B	; 43
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	80 81       	ld	r24, Z
     8d6:	98 2f       	mov	r25, r24
     8d8:	9e 7f       	andi	r25, 0xFE	; 254
     8da:	eb 81       	ldd	r30, Y+3	; 0x03
     8dc:	fc 81       	ldd	r31, Y+4	; 0x04
     8de:	81 81       	ldd	r24, Z+1	; 0x01
     8e0:	81 70       	andi	r24, 0x01	; 1
     8e2:	89 2b       	or	r24, r25
     8e4:	8c 93       	st	X, r24


	/* Set RX Complete Interrupt Mode Configuration */
	UCSRB = (UCSRB & 0b01111111) | (( USART_configStructurePtr->rxCompleteInterruptModeConfig & 0b00000001)<<(RXCIE));
     8e6:	aa e2       	ldi	r26, 0x2A	; 42
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	ea e2       	ldi	r30, 0x2A	; 42
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	80 81       	ld	r24, Z
     8f0:	28 2f       	mov	r18, r24
     8f2:	2f 77       	andi	r18, 0x7F	; 127
     8f4:	eb 81       	ldd	r30, Y+3	; 0x03
     8f6:	fc 81       	ldd	r31, Y+4	; 0x04
     8f8:	82 81       	ldd	r24, Z+2	; 0x02
     8fa:	88 2f       	mov	r24, r24
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	96 95       	lsr	r25
     900:	98 2f       	mov	r25, r24
     902:	88 27       	eor	r24, r24
     904:	97 95       	ror	r25
     906:	87 95       	ror	r24
     908:	82 2b       	or	r24, r18
     90a:	8c 93       	st	X, r24

	/* Set TX Complete Interrupt Mode Configuration */
	UCSRB = (UCSRB & 0b10111111) | (( USART_configStructurePtr->txCompleteInterruptModeConfig & 0b00000001)<<(TXCIE));
     90c:	aa e2       	ldi	r26, 0x2A	; 42
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	ea e2       	ldi	r30, 0x2A	; 42
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	80 81       	ld	r24, Z
     916:	28 2f       	mov	r18, r24
     918:	2f 7b       	andi	r18, 0xBF	; 191
     91a:	eb 81       	ldd	r30, Y+3	; 0x03
     91c:	fc 81       	ldd	r31, Y+4	; 0x04
     91e:	83 81       	ldd	r24, Z+3	; 0x03
     920:	88 2f       	mov	r24, r24
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	81 70       	andi	r24, 0x01	; 1
     926:	90 70       	andi	r25, 0x00	; 0
     928:	00 24       	eor	r0, r0
     92a:	96 95       	lsr	r25
     92c:	87 95       	ror	r24
     92e:	07 94       	ror	r0
     930:	96 95       	lsr	r25
     932:	87 95       	ror	r24
     934:	07 94       	ror	r0
     936:	98 2f       	mov	r25, r24
     938:	80 2d       	mov	r24, r0
     93a:	82 2b       	or	r24, r18
     93c:	8c 93       	st	X, r24
	/* Set Data Register Empty Interrupt Mode Configuration */
	UCSRB = (UCSRB & 0b11011111) | (( USART_configStructurePtr->dataRegisterEmptyInterruptModeConfig & 0b00000001)<<(UDRIE));
     93e:	aa e2       	ldi	r26, 0x2A	; 42
     940:	b0 e0       	ldi	r27, 0x00	; 0
     942:	ea e2       	ldi	r30, 0x2A	; 42
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	80 81       	ld	r24, Z
     948:	28 2f       	mov	r18, r24
     94a:	2f 7d       	andi	r18, 0xDF	; 223
     94c:	eb 81       	ldd	r30, Y+3	; 0x03
     94e:	fc 81       	ldd	r31, Y+4	; 0x04
     950:	84 81       	ldd	r24, Z+4	; 0x04
     952:	88 2f       	mov	r24, r24
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	81 70       	andi	r24, 0x01	; 1
     958:	90 70       	andi	r25, 0x00	; 0
     95a:	88 0f       	add	r24, r24
     95c:	99 1f       	adc	r25, r25
     95e:	82 95       	swap	r24
     960:	92 95       	swap	r25
     962:	90 7f       	andi	r25, 0xF0	; 240
     964:	98 27       	eor	r25, r24
     966:	80 7f       	andi	r24, 0xF0	; 240
     968:	98 27       	eor	r25, r24
     96a:	82 2b       	or	r24, r18
     96c:	8c 93       	st	X, r24

	/* Set the character size configuration */
	UCSRB = (UCSRB & 0b11111011) | ((( USART_configStructurePtr->characterSizeConfig & 0b00000100)>>2)<<(UCSZ2));
     96e:	aa e2       	ldi	r26, 0x2A	; 42
     970:	b0 e0       	ldi	r27, 0x00	; 0
     972:	ea e2       	ldi	r30, 0x2A	; 42
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	80 81       	ld	r24, Z
     978:	98 2f       	mov	r25, r24
     97a:	9b 7f       	andi	r25, 0xFB	; 251
     97c:	eb 81       	ldd	r30, Y+3	; 0x03
     97e:	fc 81       	ldd	r31, Y+4	; 0x04
     980:	80 85       	ldd	r24, Z+8	; 0x08
     982:	84 70       	andi	r24, 0x04	; 4
     984:	89 2b       	or	r24, r25
     986:	8c 93       	st	X, r24

	/* Enable Tx and Rx */
	UCSRB = (UCSRB & 0b11101111) | ((1)<<(RXEN));
     988:	aa e2       	ldi	r26, 0x2A	; 42
     98a:	b0 e0       	ldi	r27, 0x00	; 0
     98c:	ea e2       	ldi	r30, 0x2A	; 42
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 81       	ld	r24, Z
     992:	80 61       	ori	r24, 0x10	; 16
     994:	8c 93       	st	X, r24
	UCSRB = (UCSRB & 0b11110111) | ((1)<<(TXEN));
     996:	aa e2       	ldi	r26, 0x2A	; 42
     998:	b0 e0       	ldi	r27, 0x00	; 0
     99a:	ea e2       	ldi	r30, 0x2A	; 42
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	80 81       	ld	r24, Z
     9a0:	88 60       	ori	r24, 0x08	; 8
     9a2:	8c 93       	st	X, r24
	

	UCSRC = (UCSRC & 0b01111111) | ((1)<<(URSEL));
     9a4:	a0 e4       	ldi	r26, 0x40	; 64
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e0 e4       	ldi	r30, 0x40	; 64
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	80 81       	ld	r24, Z
     9ae:	80 68       	ori	r24, 0x80	; 128
     9b0:	8c 93       	st	X, r24

	/* Set USART mode Configuration */
	UCSRC = (UCSRC & 0b10111111) | (( USART_configStructurePtr->modeSelectConfig & 0b00000001)<<(UMSEL));
     9b2:	a0 e4       	ldi	r26, 0x40	; 64
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	e0 e4       	ldi	r30, 0x40	; 64
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	80 81       	ld	r24, Z
     9bc:	28 2f       	mov	r18, r24
     9be:	2f 7b       	andi	r18, 0xBF	; 191
     9c0:	eb 81       	ldd	r30, Y+3	; 0x03
     9c2:	fc 81       	ldd	r31, Y+4	; 0x04
     9c4:	85 81       	ldd	r24, Z+5	; 0x05
     9c6:	88 2f       	mov	r24, r24
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	81 70       	andi	r24, 0x01	; 1
     9cc:	90 70       	andi	r25, 0x00	; 0
     9ce:	00 24       	eor	r0, r0
     9d0:	96 95       	lsr	r25
     9d2:	87 95       	ror	r24
     9d4:	07 94       	ror	r0
     9d6:	96 95       	lsr	r25
     9d8:	87 95       	ror	r24
     9da:	07 94       	ror	r0
     9dc:	98 2f       	mov	r25, r24
     9de:	80 2d       	mov	r24, r0
     9e0:	82 2b       	or	r24, r18
     9e2:	8c 93       	st	X, r24

	/* Set Parity mode Configuration */
	UCSRC = (UCSRC & 0b11001111) | (( USART_configStructurePtr->parityBitModeConfig & 0b00000011)<<(UPM0));
     9e4:	a0 e4       	ldi	r26, 0x40	; 64
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	e0 e4       	ldi	r30, 0x40	; 64
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	80 81       	ld	r24, Z
     9ee:	28 2f       	mov	r18, r24
     9f0:	2f 7c       	andi	r18, 0xCF	; 207
     9f2:	eb 81       	ldd	r30, Y+3	; 0x03
     9f4:	fc 81       	ldd	r31, Y+4	; 0x04
     9f6:	86 81       	ldd	r24, Z+6	; 0x06
     9f8:	88 2f       	mov	r24, r24
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	83 70       	andi	r24, 0x03	; 3
     9fe:	90 70       	andi	r25, 0x00	; 0
     a00:	82 95       	swap	r24
     a02:	92 95       	swap	r25
     a04:	90 7f       	andi	r25, 0xF0	; 240
     a06:	98 27       	eor	r25, r24
     a08:	80 7f       	andi	r24, 0xF0	; 240
     a0a:	98 27       	eor	r25, r24
     a0c:	82 2b       	or	r24, r18
     a0e:	8c 93       	st	X, r24

	/* Set Stop bit mode configuration */
	UCSRC = (UCSRC & 0b11110111) | (( USART_configStructurePtr->stopBitModeConfig & 0b00000001)<<(USBS));
     a10:	a0 e4       	ldi	r26, 0x40	; 64
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e0 e4       	ldi	r30, 0x40	; 64
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	28 2f       	mov	r18, r24
     a1c:	27 7f       	andi	r18, 0xF7	; 247
     a1e:	eb 81       	ldd	r30, Y+3	; 0x03
     a20:	fc 81       	ldd	r31, Y+4	; 0x04
     a22:	87 81       	ldd	r24, Z+7	; 0x07
     a24:	88 2f       	mov	r24, r24
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	81 70       	andi	r24, 0x01	; 1
     a2a:	90 70       	andi	r25, 0x00	; 0
     a2c:	88 0f       	add	r24, r24
     a2e:	99 1f       	adc	r25, r25
     a30:	88 0f       	add	r24, r24
     a32:	99 1f       	adc	r25, r25
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	82 2b       	or	r24, r18
     a3a:	8c 93       	st	X, r24

	/* Set the character size configuration */
	UCSRC = (UCSRC & 0b11111001) | (( USART_configStructurePtr->characterSizeConfig & 0b00000011)<<(UCSZ0));
     a3c:	a0 e4       	ldi	r26, 0x40	; 64
     a3e:	b0 e0       	ldi	r27, 0x00	; 0
     a40:	e0 e4       	ldi	r30, 0x40	; 64
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	80 81       	ld	r24, Z
     a46:	28 2f       	mov	r18, r24
     a48:	29 7f       	andi	r18, 0xF9	; 249
     a4a:	eb 81       	ldd	r30, Y+3	; 0x03
     a4c:	fc 81       	ldd	r31, Y+4	; 0x04
     a4e:	80 85       	ldd	r24, Z+8	; 0x08
     a50:	88 2f       	mov	r24, r24
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	83 70       	andi	r24, 0x03	; 3
     a56:	90 70       	andi	r25, 0x00	; 0
     a58:	88 0f       	add	r24, r24
     a5a:	99 1f       	adc	r25, r25
     a5c:	82 2b       	or	r24, r18
     a5e:	8c 93       	st	X, r24

	/* Set the clock polarit configuration */
	UCSRC = (UCSRC & 0b11111110) | (( USART_configStructurePtr->clockPolarityConfig & 0b00000001)<<(UCPOL));
     a60:	a0 e4       	ldi	r26, 0x40	; 64
     a62:	b0 e0       	ldi	r27, 0x00	; 0
     a64:	e0 e4       	ldi	r30, 0x40	; 64
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 81       	ld	r24, Z
     a6a:	98 2f       	mov	r25, r24
     a6c:	9e 7f       	andi	r25, 0xFE	; 254
     a6e:	eb 81       	ldd	r30, Y+3	; 0x03
     a70:	fc 81       	ldd	r31, Y+4	; 0x04
     a72:	81 85       	ldd	r24, Z+9	; 0x09
     a74:	81 70       	andi	r24, 0x01	; 1
     a76:	89 2b       	or	r24, r25
     a78:	8c 93       	st	X, r24
	
	/* Calculate UBRR Value */
	if(USART_configStructurePtr->modeSelectConfig == SYNCHRONOUS_OPERATION_MODE){
     a7a:	eb 81       	ldd	r30, Y+3	; 0x03
     a7c:	fc 81       	ldd	r31, Y+4	; 0x04
     a7e:	85 81       	ldd	r24, Z+5	; 0x05
     a80:	81 30       	cpi	r24, 0x01	; 1
     a82:	d9 f4       	brne	.+54     	; 0xaba <USART_init+0x226>
		UBRR_registerValue = (((F_CPU / ( USART_configStructurePtr->baudrateValue* 2UL))) - 1);
     a84:	eb 81       	ldd	r30, Y+3	; 0x03
     a86:	fc 81       	ldd	r31, Y+4	; 0x04
     a88:	82 85       	ldd	r24, Z+10	; 0x0a
     a8a:	93 85       	ldd	r25, Z+11	; 0x0b
     a8c:	cc 01       	movw	r24, r24
     a8e:	a0 e0       	ldi	r26, 0x00	; 0
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	9c 01       	movw	r18, r24
     a94:	ad 01       	movw	r20, r26
     a96:	22 0f       	add	r18, r18
     a98:	33 1f       	adc	r19, r19
     a9a:	44 1f       	adc	r20, r20
     a9c:	55 1f       	adc	r21, r21
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	92 e1       	ldi	r25, 0x12	; 18
     aa2:	aa e7       	ldi	r26, 0x7A	; 122
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	bc 01       	movw	r22, r24
     aa8:	cd 01       	movw	r24, r26
     aaa:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__udivmodsi4>
     aae:	da 01       	movw	r26, r20
     ab0:	c9 01       	movw	r24, r18
     ab2:	01 97       	sbiw	r24, 0x01	; 1
     ab4:	9a 83       	std	Y+2, r25	; 0x02
     ab6:	89 83       	std	Y+1, r24	; 0x01
     ab8:	59 c0       	rjmp	.+178    	; 0xb6c <USART_init+0x2d8>
	}
	else if(USART_configStructurePtr->modeSelectConfig == ASYNCHRONOUS_OPERATION_MODE){
     aba:	eb 81       	ldd	r30, Y+3	; 0x03
     abc:	fc 81       	ldd	r31, Y+4	; 0x04
     abe:	85 81       	ldd	r24, Z+5	; 0x05
     ac0:	88 23       	and	r24, r24
     ac2:	09 f0       	breq	.+2      	; 0xac6 <USART_init+0x232>
     ac4:	53 c0       	rjmp	.+166    	; 0xb6c <USART_init+0x2d8>
		if(USART_configStructurePtr->doubleTransmissionModeConfig == USART_DOUBLE_TRANSMISSION_MODE_ENABLE_OFF)
     ac6:	eb 81       	ldd	r30, Y+3	; 0x03
     ac8:	fc 81       	ldd	r31, Y+4	; 0x04
     aca:	80 81       	ld	r24, Z
     acc:	88 23       	and	r24, r24
     ace:	39 f5       	brne	.+78     	; 0xb1e <USART_init+0x28a>
		{
			UBRR_registerValue = (((F_CPU / ( USART_configStructurePtr->baudrateValue* 16UL))) - 1);
     ad0:	eb 81       	ldd	r30, Y+3	; 0x03
     ad2:	fc 81       	ldd	r31, Y+4	; 0x04
     ad4:	82 85       	ldd	r24, Z+10	; 0x0a
     ad6:	93 85       	ldd	r25, Z+11	; 0x0b
     ad8:	cc 01       	movw	r24, r24
     ada:	a0 e0       	ldi	r26, 0x00	; 0
     adc:	b0 e0       	ldi	r27, 0x00	; 0
     ade:	88 0f       	add	r24, r24
     ae0:	99 1f       	adc	r25, r25
     ae2:	aa 1f       	adc	r26, r26
     ae4:	bb 1f       	adc	r27, r27
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	aa 1f       	adc	r26, r26
     aec:	bb 1f       	adc	r27, r27
     aee:	88 0f       	add	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	aa 1f       	adc	r26, r26
     af4:	bb 1f       	adc	r27, r27
     af6:	88 0f       	add	r24, r24
     af8:	99 1f       	adc	r25, r25
     afa:	aa 1f       	adc	r26, r26
     afc:	bb 1f       	adc	r27, r27
     afe:	9c 01       	movw	r18, r24
     b00:	ad 01       	movw	r20, r26
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	92 e1       	ldi	r25, 0x12	; 18
     b06:	aa e7       	ldi	r26, 0x7A	; 122
     b08:	b0 e0       	ldi	r27, 0x00	; 0
     b0a:	bc 01       	movw	r22, r24
     b0c:	cd 01       	movw	r24, r26
     b0e:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__udivmodsi4>
     b12:	da 01       	movw	r26, r20
     b14:	c9 01       	movw	r24, r18
     b16:	01 97       	sbiw	r24, 0x01	; 1
     b18:	9a 83       	std	Y+2, r25	; 0x02
     b1a:	89 83       	std	Y+1, r24	; 0x01
     b1c:	27 c0       	rjmp	.+78     	; 0xb6c <USART_init+0x2d8>
		}
		else if(USART_configStructurePtr->doubleTransmissionModeConfig == USART_DOUBLE_TRANSMISSION_MODE_ENABLE_ON){
     b1e:	eb 81       	ldd	r30, Y+3	; 0x03
     b20:	fc 81       	ldd	r31, Y+4	; 0x04
     b22:	80 81       	ld	r24, Z
     b24:	81 30       	cpi	r24, 0x01	; 1
     b26:	11 f5       	brne	.+68     	; 0xb6c <USART_init+0x2d8>
			UBRR_registerValue = (((F_CPU / ( USART_configStructurePtr->baudrateValue* 8UL))) - 1);
     b28:	eb 81       	ldd	r30, Y+3	; 0x03
     b2a:	fc 81       	ldd	r31, Y+4	; 0x04
     b2c:	82 85       	ldd	r24, Z+10	; 0x0a
     b2e:	93 85       	ldd	r25, Z+11	; 0x0b
     b30:	cc 01       	movw	r24, r24
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	88 0f       	add	r24, r24
     b38:	99 1f       	adc	r25, r25
     b3a:	aa 1f       	adc	r26, r26
     b3c:	bb 1f       	adc	r27, r27
     b3e:	88 0f       	add	r24, r24
     b40:	99 1f       	adc	r25, r25
     b42:	aa 1f       	adc	r26, r26
     b44:	bb 1f       	adc	r27, r27
     b46:	88 0f       	add	r24, r24
     b48:	99 1f       	adc	r25, r25
     b4a:	aa 1f       	adc	r26, r26
     b4c:	bb 1f       	adc	r27, r27
     b4e:	9c 01       	movw	r18, r24
     b50:	ad 01       	movw	r20, r26
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	92 e1       	ldi	r25, 0x12	; 18
     b56:	aa e7       	ldi	r26, 0x7A	; 122
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	bc 01       	movw	r22, r24
     b5c:	cd 01       	movw	r24, r26
     b5e:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__udivmodsi4>
     b62:	da 01       	movw	r26, r20
     b64:	c9 01       	movw	r24, r18
     b66:	01 97       	sbiw	r24, 0x01	; 1
     b68:	9a 83       	std	Y+2, r25	; 0x02
     b6a:	89 83       	std	Y+1, r24	; 0x01
	{

	}

	/* Set UBRR value */
	UBRRH = UBRR_registerValue>>8;
     b6c:	e0 e4       	ldi	r30, 0x40	; 64
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	9a 81       	ldd	r25, Y+2	; 0x02
     b74:	89 2f       	mov	r24, r25
     b76:	99 27       	eor	r25, r25
     b78:	80 83       	st	Z, r24
	UBRRL = UBRR_registerValue;
     b7a:	e9 e2       	ldi	r30, 0x29	; 41
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	80 83       	st	Z, r24
}
     b82:	0f 90       	pop	r0
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	cf 91       	pop	r28
     b8c:	df 91       	pop	r29
     b8e:	08 95       	ret

00000b90 <USART_sendByte>:
 *  [Function Name]:  USART_sendByte
 *  [Description]  :  This function is responsible for sending a byte
 *  [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void USART_sendByte(const uint8 data)
{
     b90:	df 93       	push	r29
     b92:	cf 93       	push	r28
     b94:	0f 92       	push	r0
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for Tx buffer (UDR) is empty */

	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     b9c:	eb e2       	ldi	r30, 0x2B	; 43
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	88 2f       	mov	r24, r24
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	80 72       	andi	r24, 0x20	; 32
     ba8:	90 70       	andi	r25, 0x00	; 0
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	b9 f3       	breq	.-18     	; 0xb9c <USART_sendByte+0xc>
	UDR = data;
     bae:	ec e2       	ldi	r30, 0x2C	; 44
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	80 83       	st	Z, r24

}
     bb6:	0f 90       	pop	r0
     bb8:	cf 91       	pop	r28
     bba:	df 91       	pop	r29
     bbc:	08 95       	ret

00000bbe <USART_recieveByte>:
 *  [Function Name]:  USART_recieveByte
 *  [Description]  :  This function is responsible for sending a byte
 *  [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
uint8 USART_recieveByte(void)
{
     bbe:	df 93       	push	r29
     bc0:	cf 93       	push	r28
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
	/* Wait for received data */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     bc6:	eb e2       	ldi	r30, 0x2B	; 43
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	88 23       	and	r24, r24
     bce:	dc f7       	brge	.-10     	; 0xbc6 <USART_recieveByte+0x8>

    return UDR;		
     bd0:	ec e2       	ldi	r30, 0x2C	; 44
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
}
     bd6:	cf 91       	pop	r28
     bd8:	df 91       	pop	r29
     bda:	08 95       	ret

00000bdc <USART_TXC_setCallBack>:
 *  [Description]  :  This function is responsible for getting the address of the function which
 *  					will be executed when USART TXC is set
 *  [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/

void USART_TXC_setCallBack(void (*USART_TXC_setCallBack_Ptr)(void)) {
     bdc:	df 93       	push	r29
     bde:	cf 93       	push	r28
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <USART_TXC_setCallBack+0x6>
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	9a 83       	std	Y+2, r25	; 0x02
     be8:	89 83       	std	Y+1, r24	; 0x01
	g_USART_TXC_callBackPtr = USART_TXC_setCallBack_Ptr;
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	9a 81       	ldd	r25, Y+2	; 0x02
     bee:	90 93 93 00 	sts	0x0093, r25
     bf2:	80 93 92 00 	sts	0x0092, r24
}
     bf6:	0f 90       	pop	r0
     bf8:	0f 90       	pop	r0
     bfa:	cf 91       	pop	r28
     bfc:	df 91       	pop	r29
     bfe:	08 95       	ret

00000c00 <USART_RXC_setCallBack>:
 *  [Description]  :  This function is responsible for getting the address of the function which
 *  					will be executed when USART RXC is set
 *  [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/

void USART_RXC_setCallBack(void (*USART_RXC_setCallBack_Ptr)(void)) {
     c00:	df 93       	push	r29
     c02:	cf 93       	push	r28
     c04:	00 d0       	rcall	.+0      	; 0xc06 <USART_RXC_setCallBack+0x6>
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	9a 83       	std	Y+2, r25	; 0x02
     c0c:	89 83       	std	Y+1, r24	; 0x01
	g_USART_RXC_callBackPtr = USART_RXC_setCallBack_Ptr;
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	9a 81       	ldd	r25, Y+2	; 0x02
     c12:	90 93 95 00 	sts	0x0095, r25
     c16:	80 93 94 00 	sts	0x0094, r24
}
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <USART_UDRE_setCallBack>:
 *  [Description]  :  This function is responsible for getting the address of the function which
 *  					will be executed when UDR register is empty
 *  [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/

void USART_UDRE_setCallBack(void (*USART_UDRE_setCallBack_Ptr)(void)) {
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	00 d0       	rcall	.+0      	; 0xc2a <USART_UDRE_setCallBack+0x6>
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
     c2e:	9a 83       	std	Y+2, r25	; 0x02
     c30:	89 83       	std	Y+1, r24	; 0x01
	g_USART_UDRE_callBackPtr = USART_UDRE_setCallBack_Ptr;
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	9a 81       	ldd	r25, Y+2	; 0x02
     c36:	90 93 97 00 	sts	0x0097, r25
     c3a:	80 93 96 00 	sts	0x0096, r24
}
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	cf 91       	pop	r28
     c44:	df 91       	pop	r29
     c46:	08 95       	ret

00000c48 <EEPROM_init>:
 [Function Name]:  EEPROM_init
 [Description]  :  This function is responsible for initializing EEPROM
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void EEPROM_init(void)
{
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
	/* initialize the I2C(TWI) module inside the MC */
	TWI_init(&TWI_configStructure);    /* passing the address of this structure in order to intialize the TWi Driver */
     c50:	85 e7       	ldi	r24, 0x75	; 117
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 db 02 	call	0x5b6	; 0x5b6 <TWI_init>
}
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <EEPROM_writeByte>:
			       	   	this arg shall indicates the data that will be written in the memory
 [Returns]      :  This function returns state of the writing operation SUCCESS or ERROR
 ------------------------------------------------------------------------------------------------------------------------------*/

uint8 EEPROM_writeByte(uint16 a_u16addr, uint8 a_u8data)
{
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	00 d0       	rcall	.+0      	; 0xc64 <EEPROM_writeByte+0x6>
     c64:	00 d0       	rcall	.+0      	; 0xc66 <EEPROM_writeByte+0x8>
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	9a 83       	std	Y+2, r25	; 0x02
     c6c:	89 83       	std	Y+1, r24	; 0x01
     c6e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     c70:	0e 94 4a 03 	call	0x694	; 0x694 <TWI_start>
    if (TWI_getStatus() != TW_START)
     c74:	0e 94 a2 03 	call	0x744	; 0x744 <TWI_getStatus>
     c78:	88 30       	cpi	r24, 0x08	; 8
     c7a:	11 f0       	breq	.+4      	; 0xc80 <EEPROM_writeByte+0x22>
        return ERROR;
     c7c:	1c 82       	std	Y+4, r1	; 0x04
     c7e:	28 c0       	rjmp	.+80     	; 0xcd0 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((a_u16addr & 0x0700)>>7)));
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	9a 81       	ldd	r25, Y+2	; 0x02
     c84:	80 70       	andi	r24, 0x00	; 0
     c86:	97 70       	andi	r25, 0x07	; 7
     c88:	88 0f       	add	r24, r24
     c8a:	89 2f       	mov	r24, r25
     c8c:	88 1f       	adc	r24, r24
     c8e:	99 0b       	sbc	r25, r25
     c90:	91 95       	neg	r25
     c92:	80 6a       	ori	r24, 0xA0	; 160
     c94:	0e 94 65 03 	call	0x6ca	; 0x6ca <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     c98:	0e 94 a2 03 	call	0x744	; 0x744 <TWI_getStatus>
     c9c:	88 31       	cpi	r24, 0x18	; 24
     c9e:	11 f0       	breq	.+4      	; 0xca4 <EEPROM_writeByte+0x46>
        return ERROR;
     ca0:	1c 82       	std	Y+4, r1	; 0x04
     ca2:	16 c0       	rjmp	.+44     	; 0xcd0 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_write((uint8)(a_u16addr));
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	0e 94 65 03 	call	0x6ca	; 0x6ca <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     caa:	0e 94 a2 03 	call	0x744	; 0x744 <TWI_getStatus>
     cae:	88 32       	cpi	r24, 0x28	; 40
     cb0:	11 f0       	breq	.+4      	; 0xcb6 <EEPROM_writeByte+0x58>
        return ERROR;
     cb2:	1c 82       	std	Y+4, r1	; 0x04
     cb4:	0d c0       	rjmp	.+26     	; 0xcd0 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_write(a_u8data);
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	0e 94 65 03 	call	0x6ca	; 0x6ca <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     cbc:	0e 94 a2 03 	call	0x744	; 0x744 <TWI_getStatus>
     cc0:	88 32       	cpi	r24, 0x28	; 40
     cc2:	11 f0       	breq	.+4      	; 0xcc8 <EEPROM_writeByte+0x6a>
        return ERROR;
     cc4:	1c 82       	std	Y+4, r1	; 0x04
     cc6:	04 c0       	rjmp	.+8      	; 0xcd0 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     cc8:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <TWI_stop>

    return SUCCESS;
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	8c 83       	std	Y+4, r24	; 0x04
     cd0:	8c 81       	ldd	r24, Y+4	; 0x04
}
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	cf 91       	pop	r28
     cdc:	df 91       	pop	r29
     cde:	08 95       	ret

00000ce0 <EEPROM_readByte>:
			       uint8 * a_u8data
			       	   	this arg shall indicates the address of the variable that will store the data that will be read from memory
 [Returns]      :  This function returns state of the writing operation SUCCESS or ERROR
 ------------------------------------------------------------------------------------------------------------------------------------*/
uint8 EEPROM_readByte(uint16 a_u16addr, uint8 *a_u8data)
{
     ce0:	df 93       	push	r29
     ce2:	cf 93       	push	r28
     ce4:	00 d0       	rcall	.+0      	; 0xce6 <EEPROM_readByte+0x6>
     ce6:	00 d0       	rcall	.+0      	; 0xce8 <EEPROM_readByte+0x8>
     ce8:	0f 92       	push	r0
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	9a 83       	std	Y+2, r25	; 0x02
     cf0:	89 83       	std	Y+1, r24	; 0x01
     cf2:	7c 83       	std	Y+4, r23	; 0x04
     cf4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     cf6:	0e 94 4a 03 	call	0x694	; 0x694 <TWI_start>
    if (TWI_getStatus() != TW_START)
     cfa:	0e 94 a2 03 	call	0x744	; 0x744 <TWI_getStatus>
     cfe:	88 30       	cpi	r24, 0x08	; 8
     d00:	11 f0       	breq	.+4      	; 0xd06 <EEPROM_readByte+0x26>
        return ERROR;
     d02:	1d 82       	std	Y+5, r1	; 0x05
     d04:	44 c0       	rjmp	.+136    	; 0xd8e <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((a_u16addr & 0x0700)>>7)));
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	9a 81       	ldd	r25, Y+2	; 0x02
     d0a:	80 70       	andi	r24, 0x00	; 0
     d0c:	97 70       	andi	r25, 0x07	; 7
     d0e:	88 0f       	add	r24, r24
     d10:	89 2f       	mov	r24, r25
     d12:	88 1f       	adc	r24, r24
     d14:	99 0b       	sbc	r25, r25
     d16:	91 95       	neg	r25
     d18:	80 6a       	ori	r24, 0xA0	; 160
     d1a:	0e 94 65 03 	call	0x6ca	; 0x6ca <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     d1e:	0e 94 a2 03 	call	0x744	; 0x744 <TWI_getStatus>
     d22:	88 31       	cpi	r24, 0x18	; 24
     d24:	11 f0       	breq	.+4      	; 0xd2a <EEPROM_readByte+0x4a>
        return ERROR;
     d26:	1d 82       	std	Y+5, r1	; 0x05
     d28:	32 c0       	rjmp	.+100    	; 0xd8e <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_write((uint8)(a_u16addr));
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	0e 94 65 03 	call	0x6ca	; 0x6ca <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     d30:	0e 94 a2 03 	call	0x744	; 0x744 <TWI_getStatus>
     d34:	88 32       	cpi	r24, 0x28	; 40
     d36:	11 f0       	breq	.+4      	; 0xd3c <EEPROM_readByte+0x5c>
        return ERROR;
     d38:	1d 82       	std	Y+5, r1	; 0x05
     d3a:	29 c0       	rjmp	.+82     	; 0xd8e <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
     d3c:	0e 94 4a 03 	call	0x694	; 0x694 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
     d40:	0e 94 a2 03 	call	0x744	; 0x744 <TWI_getStatus>
     d44:	80 31       	cpi	r24, 0x10	; 16
     d46:	11 f0       	breq	.+4      	; 0xd4c <EEPROM_readByte+0x6c>
        return ERROR;
     d48:	1d 82       	std	Y+5, r1	; 0x05
     d4a:	21 c0       	rjmp	.+66     	; 0xd8e <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((a_u16addr & 0x0700)>>7) | 1));
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	9a 81       	ldd	r25, Y+2	; 0x02
     d50:	80 70       	andi	r24, 0x00	; 0
     d52:	97 70       	andi	r25, 0x07	; 7
     d54:	88 0f       	add	r24, r24
     d56:	89 2f       	mov	r24, r25
     d58:	88 1f       	adc	r24, r24
     d5a:	99 0b       	sbc	r25, r25
     d5c:	91 95       	neg	r25
     d5e:	81 6a       	ori	r24, 0xA1	; 161
     d60:	0e 94 65 03 	call	0x6ca	; 0x6ca <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     d64:	0e 94 a2 03 	call	0x744	; 0x744 <TWI_getStatus>
     d68:	80 34       	cpi	r24, 0x40	; 64
     d6a:	11 f0       	breq	.+4      	; 0xd70 <EEPROM_readByte+0x90>
        return ERROR;
     d6c:	1d 82       	std	Y+5, r1	; 0x05
     d6e:	0f c0       	rjmp	.+30     	; 0xd8e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *a_u8data = TWI_readWithNACK();
     d70:	0e 94 8f 03 	call	0x71e	; 0x71e <TWI_readWithNACK>
     d74:	eb 81       	ldd	r30, Y+3	; 0x03
     d76:	fc 81       	ldd	r31, Y+4	; 0x04
     d78:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
     d7a:	0e 94 a2 03 	call	0x744	; 0x744 <TWI_getStatus>
     d7e:	88 35       	cpi	r24, 0x58	; 88
     d80:	11 f0       	breq	.+4      	; 0xd86 <EEPROM_readByte+0xa6>
        return ERROR;
     d82:	1d 82       	std	Y+5, r1	; 0x05
     d84:	04 c0       	rjmp	.+8      	; 0xd8e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     d86:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <TWI_stop>
    return SUCCESS;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	cf 91       	pop	r28
     d9c:	df 91       	pop	r29
     d9e:	08 95       	ret

00000da0 <main>:
uint8 g_counter = 0;                                     /* variable acts as seconds counter */
uint8 g_errorCounter;                                    /* counter for incorrect password entered */

/*--------------------------------------------------STRUCTURES----------------------------------------------------------------------------*/

int main() {
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	00 d0       	rcall	.+0      	; 0xda6 <main+0x6>
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62

	/*
	 * setting motor and buzzer pins as outputs
	 */
	SET_BIT(MOTOR_PORT_DIRECTION,MOTOR_IN1);
     daa:	a4 e3       	ldi	r26, 0x34	; 52
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e4 e3       	ldi	r30, 0x34	; 52
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	80 61       	ori	r24, 0x10	; 16
     db6:	8c 93       	st	X, r24
	SET_BIT(MOTOR_PORT_DIRECTION,MOTOR_IN2);
     db8:	a4 e3       	ldi	r26, 0x34	; 52
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e4 e3       	ldi	r30, 0x34	; 52
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	80 62       	ori	r24, 0x20	; 32
     dc4:	8c 93       	st	X, r24
	SET_BIT(MOTOR_PORT_DIRECTION,MOTOR_EN);
     dc6:	a4 e3       	ldi	r26, 0x34	; 52
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e4 e3       	ldi	r30, 0x34	; 52
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	88 60       	ori	r24, 0x08	; 8
     dd2:	8c 93       	st	X, r24
	SET_BIT(BUZZER_PORT_DIRECTION,BUZZER_PIN);
     dd4:	a1 e3       	ldi	r26, 0x31	; 49
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e1 e3       	ldi	r30, 0x31	; 49
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	84 60       	ori	r24, 0x04	; 4
     de0:	8c 93       	st	X, r24

	/* Enable Global Interrupts */
	SREG = (1<<7);
     de2:	ef e5       	ldi	r30, 0x5F	; 95
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 e8       	ldi	r24, 0x80	; 128
     de8:	80 83       	st	Z, r24
	/* initialize GPT driver */

	GPT_init(&GPT_configStructure);
     dea:	83 e6       	ldi	r24, 0x63	; 99
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GPT_init>
	/* set GPT_0 callBack Function */
	GPT_1_setCallBack(calledBackFunction);
     df2:	86 eb       	ldi	r24, 0xB6	; 182
     df4:	98 e0       	ldi	r25, 0x08	; 8
     df6:	0e 94 b7 02 	call	0x56e	; 0x56e <GPT_1_setCallBack>

	USART_init(&USART_configStructure);        /*intializes USART Driver */
     dfa:	88 e7       	ldi	r24, 0x78	; 120
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 4a 04 	call	0x894	; 0x894 <USART_init>
	EEPROM_init();                             /*intializes EEPROM */
     e02:	0e 94 24 06 	call	0xc48	; 0xc48 <EEPROM_init>
	while (USART_recieveByte() != ECU_READY);   /* waiting HMI_ECU to sent ECU_READY signal */
     e06:	0e 94 df 05 	call	0xbbe	; 0xbbe <USART_recieveByte>
     e0a:	81 31       	cpi	r24, 0x11	; 17
     e0c:	e1 f7       	brne	.-8      	; 0xe06 <main+0x66>
	USART_sendByte(ECU_READY);
     e0e:	81 e1       	ldi	r24, 0x11	; 17
     e10:	0e 94 c8 05 	call	0xb90	; 0xb90 <USART_sendByte>
	while (USART_recieveByte() != ECU_READY);   /* waiting HMI_ECU to sent ECU_READY si */
     e14:	0e 94 df 05 	call	0xbbe	; 0xbbe <USART_recieveByte>
     e18:	81 31       	cpi	r24, 0x11	; 17
     e1a:	e1 f7       	brne	.-8      	; 0xe14 <main+0x74>
	while (1) {
		g_data = recieveData();                /* recieving command from HMI_ECU */
     e1c:	0e 94 9f 08 	call	0x113e	; 0x113e <recieveData>
     e20:	80 93 a0 00 	sts	0x00A0, r24
		switch (g_data) {                      /* switching between functions regarding the recieved command */
     e24:	80 91 a0 00 	lds	r24, 0x00A0
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	3a 83       	std	Y+2, r19	; 0x02
     e2e:	29 83       	std	Y+1, r18	; 0x01
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	9a 81       	ldd	r25, Y+2	; 0x02
     e34:	82 30       	cpi	r24, 0x02	; 2
     e36:	91 05       	cpc	r25, r1
     e38:	c9 f0       	breq	.+50     	; 0xe6c <main+0xcc>
     e3a:	29 81       	ldd	r18, Y+1	; 0x01
     e3c:	3a 81       	ldd	r19, Y+2	; 0x02
     e3e:	23 30       	cpi	r18, 0x03	; 3
     e40:	31 05       	cpc	r19, r1
     e42:	34 f4       	brge	.+12     	; 0xe50 <main+0xb0>
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	9a 81       	ldd	r25, Y+2	; 0x02
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	91 05       	cpc	r25, r1
     e4c:	61 f0       	breq	.+24     	; 0xe66 <main+0xc6>
     e4e:	e6 cf       	rjmp	.-52     	; 0xe1c <main+0x7c>
     e50:	29 81       	ldd	r18, Y+1	; 0x01
     e52:	3a 81       	ldd	r19, Y+2	; 0x02
     e54:	25 30       	cpi	r18, 0x05	; 5
     e56:	31 05       	cpc	r19, r1
     e58:	61 f0       	breq	.+24     	; 0xe72 <main+0xd2>
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	9a 81       	ldd	r25, Y+2	; 0x02
     e5e:	87 30       	cpi	r24, 0x07	; 7
     e60:	91 05       	cpc	r25, r1
     e62:	51 f0       	breq	.+20     	; 0xe78 <main+0xd8>
     e64:	db cf       	rjmp	.-74     	; 0xe1c <main+0x7c>
		case PASSWORD_COMMAND:
			passwordCreation();
     e66:	0e 94 3f 07 	call	0xe7e	; 0xe7e <passwordCreation>
     e6a:	d8 cf       	rjmp	.-80     	; 0xe1c <main+0x7c>
			break;
		case PASSWORD_CONFIRMATION_COMMAND:
			passwordConfirmation();
     e6c:	0e 94 5e 07 	call	0xebc	; 0xebc <passwordConfirmation>
     e70:	d5 cf       	rjmp	.-86     	; 0xe1c <main+0x7c>
			break;
		case PASSWORD_SCREEN_COMMAND:
			comparingWithSavedPassword();
     e72:	0e 94 b7 07 	call	0xf6e	; 0xf6e <comparingWithSavedPassword>
     e76:	d2 cf       	rjmp	.-92     	; 0xe1c <main+0x7c>
			break;
		case OPEN_DOOR_COMMAND:
			openCloseDoor();
     e78:	0e 94 21 08 	call	0x1042	; 0x1042 <openCloseDoor>
     e7c:	cf cf       	rjmp	.-98     	; 0xe1c <main+0x7c>

00000e7e <passwordCreation>:
/*----------------------------------------------------------------------------------------------------
 [Function Name]:  passwordCreation
 [Description]  :  This function is responsible for password creation
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void passwordCreation(void) {
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	0f 92       	push	r0
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
	uint8 i = 0;
     e8c:	19 82       	std	Y+1, r1	; 0x01
     e8e:	0c c0       	rjmp	.+24     	; 0xea8 <passwordCreation+0x2a>
	/* looping until HMI_ECU sends COMPLETE_TASK_COMMAND */
	while (USART_recieveByte() != COMPLETE_TASK_COMMAND) {
		g_password[i] = USART_recieveByte(); /* storing the sent password in g_password array */
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	08 2f       	mov	r16, r24
     e94:	10 e0       	ldi	r17, 0x00	; 0
     e96:	0e 94 df 05 	call	0xbbe	; 0xbbe <USART_recieveByte>
     e9a:	f8 01       	movw	r30, r16
     e9c:	e8 56       	subi	r30, 0x68	; 104
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	80 83       	st	Z, r24
		i++;
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	8f 5f       	subi	r24, 0xFF	; 255
     ea6:	89 83       	std	Y+1, r24	; 0x01
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void passwordCreation(void) {
	uint8 i = 0;
	/* looping until HMI_ECU sends COMPLETE_TASK_COMMAND */
	while (USART_recieveByte() != COMPLETE_TASK_COMMAND) {
     ea8:	0e 94 df 05 	call	0xbbe	; 0xbbe <USART_recieveByte>
     eac:	8a 30       	cpi	r24, 0x0A	; 10
     eae:	81 f7       	brne	.-32     	; 0xe90 <passwordCreation+0x12>
		g_password[i] = USART_recieveByte(); /* storing the sent password in g_password array */
		i++;
	}
}
     eb0:	0f 90       	pop	r0
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	1f 91       	pop	r17
     eb8:	0f 91       	pop	r16
     eba:	08 95       	ret

00000ebc <passwordConfirmation>:
/*----------------------------------------------------------------------------------------------------
 [Function Name]:  passwordConfirmation
 [Description]  :  This function is responsible for matching the rentered password with the first one
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void passwordConfirmation(void) {
     ebc:	1f 93       	push	r17
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <passwordConfirmation+0x8>
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62

	uint8 i = 0;
     ec8:	1a 82       	std	Y+2, r1	; 0x02
	uint8 flag = 0;
     eca:	19 82       	std	Y+1, r1	; 0x01
     ecc:	10 c0       	rjmp	.+32     	; 0xeee <passwordConfirmation+0x32>
	/* looping until HMI_ECU sends COMPLETE_TASK_COMMAND */
	while (USART_recieveByte() != COMPLETE_TASK_COMMAND) {
		if (g_password[i] == USART_recieveByte()) {
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	88 2f       	mov	r24, r24
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	fc 01       	movw	r30, r24
     ed6:	e8 56       	subi	r30, 0x68	; 104
     ed8:	ff 4f       	sbci	r31, 0xFF	; 255
     eda:	10 81       	ld	r17, Z
     edc:	0e 94 df 05 	call	0xbbe	; 0xbbe <USART_recieveByte>
     ee0:	18 17       	cp	r17, r24
     ee2:	11 f0       	breq	.+4      	; 0xee8 <passwordConfirmation+0x2c>

		} else {
			flag = 1;  /* not matched occurs */
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	89 83       	std	Y+1, r24	; 0x01
		}
		i++;
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	8f 5f       	subi	r24, 0xFF	; 255
     eec:	8a 83       	std	Y+2, r24	; 0x02
void passwordConfirmation(void) {

	uint8 i = 0;
	uint8 flag = 0;
	/* looping until HMI_ECU sends COMPLETE_TASK_COMMAND */
	while (USART_recieveByte() != COMPLETE_TASK_COMMAND) {
     eee:	0e 94 df 05 	call	0xbbe	; 0xbbe <USART_recieveByte>
     ef2:	8a 30       	cpi	r24, 0x0A	; 10
     ef4:	61 f7       	brne	.-40     	; 0xece <passwordConfirmation+0x12>
		} else {
			flag = 1;  /* not matched occurs */
		}
		i++;
	}
	if(flag)
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	88 23       	and	r24, r24
     efa:	21 f0       	breq	.+8      	; 0xf04 <passwordConfirmation+0x48>
	{
		/* send not matched command to HMI_ECU */
		USART_sendByte(PASSWORD_MATCH_NOT_CONFIRMATION_COMMAND);
     efc:	84 e0       	ldi	r24, 0x04	; 4
     efe:	0e 94 c8 05 	call	0xb90	; 0xb90 <USART_sendByte>
     f02:	07 c0       	rjmp	.+14     	; 0xf12 <passwordConfirmation+0x56>

		/*
		 * saving the password in EEPROM and
		 * sending to HMI_ECU match confirmation command
		 */
		savePassword(g_password);
     f04:	88 e9       	ldi	r24, 0x98	; 152
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 8f 07 	call	0xf1e	; 0xf1e <savePassword>
		USART_sendByte(PASSWORD_MATCH_CONFIRMATION_COMMAND);
     f0c:	83 e0       	ldi	r24, 0x03	; 3
     f0e:	0e 94 c8 05 	call	0xb90	; 0xb90 <USART_sendByte>
	}
}
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	1f 91       	pop	r17
     f1c:	08 95       	ret

00000f1e <savePassword>:
 [IN]           :  uint8 * a_pass
 	 	 	 	 	 this arg shall contains the address of the array that stores the password
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void savePassword (uint8 * a_pass)
{
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	00 d0       	rcall	.+0      	; 0xf24 <savePassword+0x6>
     f24:	0f 92       	push	r0
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	9b 83       	std	Y+3, r25	; 0x03
     f2c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     f2e:	19 82       	std	Y+1, r1	; 0x01
     f30:	15 c0       	rjmp	.+42     	; 0xf5c <savePassword+0x3e>
	while(i!=5) /* password size */
	{
		EEPROM_writeByte(BASE_ADDRESS_LOCATION+i,a_pass[i]); /* writing in EEPROM byte by byte */
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	88 2f       	mov	r24, r24
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	02 96       	adiw	r24, 0x02	; 2
     f3a:	ac 01       	movw	r20, r24
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	9b 81       	ldd	r25, Y+3	; 0x03
     f46:	fc 01       	movw	r30, r24
     f48:	e2 0f       	add	r30, r18
     f4a:	f3 1f       	adc	r31, r19
     f4c:	20 81       	ld	r18, Z
     f4e:	ca 01       	movw	r24, r20
     f50:	62 2f       	mov	r22, r18
     f52:	0e 94 2f 06 	call	0xc5e	; 0xc5e <EEPROM_writeByte>
		i++;
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	8f 5f       	subi	r24, 0xFF	; 255
     f5a:	89 83       	std	Y+1, r24	; 0x01
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void savePassword (uint8 * a_pass)
{
	uint8 i = 0;
	while(i!=5) /* password size */
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	85 30       	cpi	r24, 0x05	; 5
     f60:	41 f7       	brne	.-48     	; 0xf32 <savePassword+0x14>
	{
		EEPROM_writeByte(BASE_ADDRESS_LOCATION+i,a_pass[i]); /* writing in EEPROM byte by byte */
		i++;
	}
}
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <comparingWithSavedPassword>:
 [Function Name]:  comparingWithSavedPassword
 [Description]  :  This function is responsible for comparing the requested password with the saved one in the EEPROM
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void comparingWithSavedPassword (void)
{
     f6e:	1f 93       	push	r17
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	00 d0       	rcall	.+0      	; 0xf76 <comparingWithSavedPassword+0x8>
     f76:	00 d0       	rcall	.+0      	; 0xf78 <comparingWithSavedPassword+0xa>
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
	uint8 i = 0;
     f7c:	1c 82       	std	Y+4, r1	; 0x04
	uint8 * g_password_Ptr = g_password;
     f7e:	88 e9       	ldi	r24, 0x98	; 152
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	9b 83       	std	Y+3, r25	; 0x03
     f84:	8a 83       	std	Y+2, r24	; 0x02
     f86:	13 c0       	rjmp	.+38     	; 0xfae <comparingWithSavedPassword+0x40>
	while(i!=5) /* looping until password size to get password from EEPROM */
		{
			EEPROM_readByte(BASE_ADDRESS_LOCATION+i,g_password_Ptr+i);
     f88:	8c 81       	ldd	r24, Y+4	; 0x04
     f8a:	88 2f       	mov	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 96       	adiw	r24, 0x02	; 2
     f90:	ac 01       	movw	r20, r24
     f92:	8c 81       	ldd	r24, Y+4	; 0x04
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	9b 81       	ldd	r25, Y+3	; 0x03
     f9c:	28 0f       	add	r18, r24
     f9e:	39 1f       	adc	r19, r25
     fa0:	ca 01       	movw	r24, r20
     fa2:	b9 01       	movw	r22, r18
     fa4:	0e 94 70 06 	call	0xce0	; 0xce0 <EEPROM_readByte>
			i++;
     fa8:	8c 81       	ldd	r24, Y+4	; 0x04
     faa:	8f 5f       	subi	r24, 0xFF	; 255
     fac:	8c 83       	std	Y+4, r24	; 0x04
 ----------------------------------------------------------------------------------------------------*/
void comparingWithSavedPassword (void)
{
	uint8 i = 0;
	uint8 * g_password_Ptr = g_password;
	while(i!=5) /* looping until password size to get password from EEPROM */
     fae:	8c 81       	ldd	r24, Y+4	; 0x04
     fb0:	85 30       	cpi	r24, 0x05	; 5
     fb2:	51 f7       	brne	.-44     	; 0xf88 <comparingWithSavedPassword+0x1a>
		{
			EEPROM_readByte(BASE_ADDRESS_LOCATION+i,g_password_Ptr+i);
			i++;
		}
	USART_sendByte(GET_PASSWORD_DONE); /* send to HMI_ECU GET_PASSWORD_DONE command */
     fb4:	8c e0       	ldi	r24, 0x0C	; 12
     fb6:	0e 94 c8 05 	call	0xb90	; 0xb90 <USART_sendByte>
	while(USART_recieveByte() != ECU_READY); /* looping until HMI_ECU sends ECU_READY signal */
     fba:	0e 94 df 05 	call	0xbbe	; 0xbbe <USART_recieveByte>
     fbe:	81 31       	cpi	r24, 0x11	; 17
     fc0:	e1 f7       	brne	.-8      	; 0xfba <comparingWithSavedPassword+0x4c>
	i = 0;
     fc2:	1c 82       	std	Y+4, r1	; 0x04
		uint8 flag = 0;
     fc4:	19 82       	std	Y+1, r1	; 0x01
     fc6:	10 c0       	rjmp	.+32     	; 0xfe8 <comparingWithSavedPassword+0x7a>
		/* looping until HMI_ECU sends COMPLETE_TASK_COMMAND */
		while (USART_recieveByte() != COMPLETE_TASK_COMMAND) {
			if (g_password[i] == USART_recieveByte()) {
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	fc 01       	movw	r30, r24
     fd0:	e8 56       	subi	r30, 0x68	; 104
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	10 81       	ld	r17, Z
     fd6:	0e 94 df 05 	call	0xbbe	; 0xbbe <USART_recieveByte>
     fda:	18 17       	cp	r17, r24
     fdc:	11 f0       	breq	.+4      	; 0xfe2 <comparingWithSavedPassword+0x74>

			} else {
				flag = 1; /* Incorrect password entered */
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
			}
			i++;
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	8f 5f       	subi	r24, 0xFF	; 255
     fe6:	8c 83       	std	Y+4, r24	; 0x04
	USART_sendByte(GET_PASSWORD_DONE); /* send to HMI_ECU GET_PASSWORD_DONE command */
	while(USART_recieveByte() != ECU_READY); /* looping until HMI_ECU sends ECU_READY signal */
	i = 0;
		uint8 flag = 0;
		/* looping until HMI_ECU sends COMPLETE_TASK_COMMAND */
		while (USART_recieveByte() != COMPLETE_TASK_COMMAND) {
     fe8:	0e 94 df 05 	call	0xbbe	; 0xbbe <USART_recieveByte>
     fec:	8a 30       	cpi	r24, 0x0A	; 10
     fee:	61 f7       	brne	.-40     	; 0xfc8 <comparingWithSavedPassword+0x5a>
			} else {
				flag = 1; /* Incorrect password entered */
			}
			i++;
		}
		if(flag)
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	88 23       	and	r24, r24
     ff4:	a9 f0       	breq	.+42     	; 0x1020 <comparingWithSavedPassword+0xb2>
		{
			g_errorCounter++;
     ff6:	80 91 9f 00 	lds	r24, 0x009F
     ffa:	8f 5f       	subi	r24, 0xFF	; 255
     ffc:	80 93 9f 00 	sts	0x009F, r24
			if(g_errorCounter == 3)
    1000:	80 91 9f 00 	lds	r24, 0x009F
    1004:	83 30       	cpi	r24, 0x03	; 3
    1006:	41 f4       	brne	.+16     	; 0x1018 <comparingWithSavedPassword+0xaa>
			{
				/*
				 * after 3 times incorrect password entered buzzer starts and sending to HMI_ECU ALARM_COMMAND
				 */
				USART_sendByte(ALARM_COMMAND);
    1008:	8b e0       	ldi	r24, 0x0B	; 11
    100a:	0e 94 c8 05 	call	0xb90	; 0xb90 <USART_sendByte>
				buzzer();
    100e:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <buzzer>
				g_errorCounter=0;
    1012:	10 92 9f 00 	sts	0x009F, r1
    1016:	0d c0       	rjmp	.+26     	; 0x1032 <comparingWithSavedPassword+0xc4>
			}
			else{
			USART_sendByte(PASSWORD_MATCH_NOT_CONFIRMATION_COMMAND);
    1018:	84 e0       	ldi	r24, 0x04	; 4
    101a:	0e 94 c8 05 	call	0xb90	; 0xb90 <USART_sendByte>
    101e:	09 c0       	rjmp	.+18     	; 0x1032 <comparingWithSavedPassword+0xc4>
			}
		}
		else
		{
			USART_sendByte(PASSWORD_MATCH_CONFIRMATION_COMMAND);
    1020:	83 e0       	ldi	r24, 0x03	; 3
    1022:	0e 94 c8 05 	call	0xb90	; 0xb90 <USART_sendByte>
			savePassword(g_password);
    1026:	88 e9       	ldi	r24, 0x98	; 152
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <savePassword>
			g_errorCounter=0;
    102e:	10 92 9f 00 	sts	0x009F, r1
		}

}
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	1f 91       	pop	r17
    1040:	08 95       	ret

00001042 <openCloseDoor>:
/*----------------------------------------------------------------------------------------------------
 [Function Name]:  openCloseDoor
 [Description]  :  This function is responsible for opening and closing the door
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void openCloseDoor(void){
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
	 * turning off the motor
	 * sending to HMI_ECU COMPLETE_TASK_COMMAND
	 */

	/* enable GPT_1 */
	GPT_enable(1);
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	0e 94 c9 01 	call	0x392	; 0x392 <GPT_enable>
	USART_sendByte(DOOR_IS_OPENNING_COMMAND);
    1050:	88 e0       	ldi	r24, 0x08	; 8
    1052:	0e 94 c8 05 	call	0xb90	; 0xb90 <USART_sendByte>
	SET_BIT(MOTOR_PORT,MOTOR_EN);
    1056:	a5 e3       	ldi	r26, 0x35	; 53
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e5 e3       	ldi	r30, 0x35	; 53
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	88 60       	ori	r24, 0x08	; 8
    1062:	8c 93       	st	X, r24
	SET_BIT(MOTOR_PORT,MOTOR_IN1);
    1064:	a5 e3       	ldi	r26, 0x35	; 53
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e5 e3       	ldi	r30, 0x35	; 53
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	80 61       	ori	r24, 0x10	; 16
    1070:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_PORT,MOTOR_IN2);
    1072:	a5 e3       	ldi	r26, 0x35	; 53
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e5 e3       	ldi	r30, 0x35	; 53
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	8f 7d       	andi	r24, 0xDF	; 223
    107e:	8c 93       	st	X, r24
	g_counter = 0;
    1080:	10 92 9e 00 	sts	0x009E, r1
	while(g_counter != 15);
    1084:	80 91 9e 00 	lds	r24, 0x009E
    1088:	8f 30       	cpi	r24, 0x0F	; 15
    108a:	e1 f7       	brne	.-8      	; 0x1084 <openCloseDoor+0x42>
	g_counter = 0;
    108c:	10 92 9e 00 	sts	0x009E, r1
    SET_BIT(MOTOR_PORT,MOTOR_IN2);
    1090:	a5 e3       	ldi	r26, 0x35	; 53
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e5 e3       	ldi	r30, 0x35	; 53
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	80 62       	ori	r24, 0x20	; 32
    109c:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_PORT,MOTOR_IN1);
    109e:	a5 e3       	ldi	r26, 0x35	; 53
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e5 e3       	ldi	r30, 0x35	; 53
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	8f 7e       	andi	r24, 0xEF	; 239
    10aa:	8c 93       	st	X, r24
	USART_sendByte(DOOR_IS_LOCKING_COMMAND);
    10ac:	89 e0       	ldi	r24, 0x09	; 9
    10ae:	0e 94 c8 05 	call	0xb90	; 0xb90 <USART_sendByte>
	while(g_counter != 15);
    10b2:	80 91 9e 00 	lds	r24, 0x009E
    10b6:	8f 30       	cpi	r24, 0x0F	; 15
    10b8:	e1 f7       	brne	.-8      	; 0x10b2 <openCloseDoor+0x70>
	GPT_disable(1);
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	0e 94 3b 02 	call	0x476	; 0x476 <GPT_disable>
	CLEAR_BIT(MOTOR_PORT,MOTOR_EN);
    10c0:	a5 e3       	ldi	r26, 0x35	; 53
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e5 e3       	ldi	r30, 0x35	; 53
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	87 7f       	andi	r24, 0xF7	; 247
    10cc:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_PORT,MOTOR_IN1);
    10ce:	a5 e3       	ldi	r26, 0x35	; 53
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e5 e3       	ldi	r30, 0x35	; 53
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	8f 7e       	andi	r24, 0xEF	; 239
    10da:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_PORT,MOTOR_IN2);
    10dc:	a5 e3       	ldi	r26, 0x35	; 53
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e5 e3       	ldi	r30, 0x35	; 53
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	8f 7d       	andi	r24, 0xDF	; 223
    10e8:	8c 93       	st	X, r24
	USART_sendByte(COMPLETE_TASK_COMMAND);
    10ea:	8a e0       	ldi	r24, 0x0A	; 10
    10ec:	0e 94 c8 05 	call	0xb90	; 0xb90 <USART_sendByte>

}
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <buzzer>:
/*----------------------------------------------------------------------------------------------------
 [Function Name]:  buzzer
 [Description]  :  This function is responsible for turning on and off the buzzer
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void buzzer(void){
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
	 * turning off the buzzer
	 * sending to HMI_ECU COMPLETE_TASK_COMMAND
	 */

	/* enable GPT_1 */
	GPT_enable(1);
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	0e 94 c9 01 	call	0x392	; 0x392 <GPT_enable>
	g_counter = 0;
    1104:	10 92 9e 00 	sts	0x009E, r1
	SET_BIT(BUZZER_PORT,BUZZER_PIN);
    1108:	a2 e3       	ldi	r26, 0x32	; 50
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e2 e3       	ldi	r30, 0x32	; 50
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	84 60       	ori	r24, 0x04	; 4
    1114:	8c 93       	st	X, r24
	while(g_counter != 60);
    1116:	80 91 9e 00 	lds	r24, 0x009E
    111a:	8c 33       	cpi	r24, 0x3C	; 60
    111c:	e1 f7       	brne	.-8      	; 0x1116 <buzzer+0x20>
	GPT_disable(1);
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	0e 94 3b 02 	call	0x476	; 0x476 <GPT_disable>
    CLEAR_BIT(BUZZER_PORT,BUZZER_PIN);
    1124:	a2 e3       	ldi	r26, 0x32	; 50
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e2 e3       	ldi	r30, 0x32	; 50
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	8b 7f       	andi	r24, 0xFB	; 251
    1130:	8c 93       	st	X, r24
	USART_sendByte(COMPLETE_TASK_COMMAND);
    1132:	8a e0       	ldi	r24, 0x0A	; 10
    1134:	0e 94 c8 05 	call	0xb90	; 0xb90 <USART_sendByte>
}
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <recieveData>:
/*----------------------------------------------------------------------------------------------------
 [Function Name]:  recieveData
 [Description]  :  This function is responsible for recieving the data from HMI_ECU
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
uint8 recieveData(void) {
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
	while (USART_recieveByte() != ECU_READY)
    1146:	0e 94 df 05 	call	0xbbe	; 0xbbe <USART_recieveByte>
    114a:	81 31       	cpi	r24, 0x11	; 17
    114c:	e1 f7       	brne	.-8      	; 0x1146 <recieveData+0x8>
		;
	USART_sendByte(ECU_READY);
    114e:	81 e1       	ldi	r24, 0x11	; 17
    1150:	0e 94 c8 05 	call	0xb90	; 0xb90 <USART_sendByte>
	g_data = USART_recieveByte();
    1154:	0e 94 df 05 	call	0xbbe	; 0xbbe <USART_recieveByte>
    1158:	80 93 a0 00 	sts	0x00A0, r24
	USART_sendByte(ECU_READY);
    115c:	81 e1       	ldi	r24, 0x11	; 17
    115e:	0e 94 c8 05 	call	0xb90	; 0xb90 <USART_sendByte>
	return g_data;
    1162:	80 91 a0 00 	lds	r24, 0x00A0
}
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	08 95       	ret

0000116c <calledBackFunction>:
/*----------------------------------------------------------------------------------------------------
 [Function Name]:  calledBackFunction
 [Description]  :  This function is being called by Timer 1 when excutes its ISR
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void calledBackFunction (void){
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
	g_counter++;  /* seconds counter */
    1174:	80 91 9e 00 	lds	r24, 0x009E
    1178:	8f 5f       	subi	r24, 0xFF	; 255
    117a:	80 93 9e 00 	sts	0x009E, r24
	CLEAR_BIT(MOTOR_PORT,MOTOR_EN);
    117e:	a5 e3       	ldi	r26, 0x35	; 53
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e5 e3       	ldi	r30, 0x35	; 53
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	87 7f       	andi	r24, 0xF7	; 247
    118a:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_PORT,MOTOR_IN1);
    118c:	a5 e3       	ldi	r26, 0x35	; 53
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e5 e3       	ldi	r30, 0x35	; 53
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	8f 7e       	andi	r24, 0xEF	; 239
    1198:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_PORT,MOTOR_IN2);
    119a:	a5 e3       	ldi	r26, 0x35	; 53
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e5 e3       	ldi	r30, 0x35	; 53
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	8f 7d       	andi	r24, 0xDF	; 223
    11a6:	8c 93       	st	X, r24
}
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <__udivmodsi4>:
    11ae:	a1 e2       	ldi	r26, 0x21	; 33
    11b0:	1a 2e       	mov	r1, r26
    11b2:	aa 1b       	sub	r26, r26
    11b4:	bb 1b       	sub	r27, r27
    11b6:	fd 01       	movw	r30, r26
    11b8:	0d c0       	rjmp	.+26     	; 0x11d4 <__udivmodsi4_ep>

000011ba <__udivmodsi4_loop>:
    11ba:	aa 1f       	adc	r26, r26
    11bc:	bb 1f       	adc	r27, r27
    11be:	ee 1f       	adc	r30, r30
    11c0:	ff 1f       	adc	r31, r31
    11c2:	a2 17       	cp	r26, r18
    11c4:	b3 07       	cpc	r27, r19
    11c6:	e4 07       	cpc	r30, r20
    11c8:	f5 07       	cpc	r31, r21
    11ca:	20 f0       	brcs	.+8      	; 0x11d4 <__udivmodsi4_ep>
    11cc:	a2 1b       	sub	r26, r18
    11ce:	b3 0b       	sbc	r27, r19
    11d0:	e4 0b       	sbc	r30, r20
    11d2:	f5 0b       	sbc	r31, r21

000011d4 <__udivmodsi4_ep>:
    11d4:	66 1f       	adc	r22, r22
    11d6:	77 1f       	adc	r23, r23
    11d8:	88 1f       	adc	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	1a 94       	dec	r1
    11de:	69 f7       	brne	.-38     	; 0x11ba <__udivmodsi4_loop>
    11e0:	60 95       	com	r22
    11e2:	70 95       	com	r23
    11e4:	80 95       	com	r24
    11e6:	90 95       	com	r25
    11e8:	9b 01       	movw	r18, r22
    11ea:	ac 01       	movw	r20, r24
    11ec:	bd 01       	movw	r22, r26
    11ee:	cf 01       	movw	r24, r30
    11f0:	08 95       	ret

000011f2 <_exit>:
    11f2:	f8 94       	cli

000011f4 <__stop_program>:
    11f4:	ff cf       	rjmp	.-2      	; 0x11f4 <__stop_program>
